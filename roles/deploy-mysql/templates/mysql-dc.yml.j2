apiVersion: v1
kind: DeploymentConfig
name: '{{ deployment_name }}'
namespace: '{{ namespace }}'
labels:
  app: '{{ application_name }}'
  service: '{{ service_name }}'
spec:
  selector:
    app: '{{ application_name }}'
    service: '{{ service_name }}'
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - mysql
        from:
          kind: ImageStreamTag
          name: '{{ mysql_image_name }}:{{ mysql_image_tag }}'
          namespace: '{{ mysql_image_namespace }}'
  replicas: 1
  template:
    metadata:
      labels:
        app: '{{ application_name }}'
        service: '{{ service_name }}'
    spec:
      containers:
        - name: mysql
          env:
            - name: MYSQL_DATABASE
              value: '{{ mysql_database }}'
            - name: MYSQL_USER
              value: '{{ mysql_user }}'
            - name: MYSQL_PASSWORD
              value: '{{ mysql_pwd }}'
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 5
            exec:
              command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
              port: 3306
            timeoutSeconds: 1
          ports:
            - containerPort: 3306
              protocol: TCP
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql/data
          workingDir: /
      volumes:
      - name: mysql-data
{% if mysql_volume_size == "" %}
        emptyDir: {}
{% else %}
        persistentVolumeClaim:
          claimName: '{{ deployment_name }}'
{% endif %}
