---
- name: "[KIE SERVER] set service state to {{ state }}"
  k8s_v1_service:
    name: '{{ kieserver_deployment_name }}'
    namespace: '{{ namespace }}'
    state: '{{ state }}'
    labels:
      app: '{{ application_name }}'
      service: '{{ kieserver_service_name }}'
    selector:
      app: '{{ application_name }}'
      service: '{{ kieserver_service_name }}'
      deploymentconfig: '{{ kieserver_deployment_name }}'
    ports:
      - name: http
        port: 8080
        target_port: 8080
      - name: https
        port: 8443
        target_port: 8443

- name: "[KIE SERVER] set https route state to {{ state }}"
  openshift_v1_route:
    name: '{{ kieserver_deployment_name }}'
    namespace: '{{ namespace }}'
    state: '{{ state }}'
    labels:
      app: '{{ application_name }}'
      service: '{{ kieserver_service_name }}'
    tls_termination: passthrough
    tls_insecure_edge_termination_policy: Redirect
    to_name: '{{ kieserver_deployment_name }}'
    spec_port_target_port: https
    spec_host: '{{ kieserver_hostname }}'
  register: route_raw

- name: "[KIE SERVER] set service account state to {{ state }}"
  k8s_v1_service_account:
    name: '{{ kieserver_deployment_name }}'
    namespace: '{{ namespace }}'
    state: "{{ state }}"
    labels:
      app: '{{ application_name }}'
      service: '{{ kieserver_service_name }}'
  when:
    - kieserver_ha

- name: "[KIE SERVER] set default secret name if none provided"
  set_fact:
    ks_secret_name: "{{ kieserver_secret_name | default(kieserver_default_secret_name, true) }}"

- name: "[KIE SERVER] generate secret if not present"
  include_role:
    name: generate-secret
  vars:
    secret_name: '{{ ks_secret_name }}'
    service_name: '{{ kieserver_service_name }}'
    keystore_name: '{{ kieserver_keystore_name }}'
    keystore_alias: '{{ kieserver_keystore_alias }}'
    keystore_pwd: '{{ kieserver_keystore_pwd }}'
    route_host: '{{ route_raw.route.spec.host }}'

- name: "[KIE SERVER] set persistent volume claim state to {{ state }}"
  k8s_v1_persistent_volume_claim:
    name: '{{ kieserver_deployment_name }}-h2-data'
    namespace: '{{ namespace }}'
    state: "{{ state }}"
    labels:
      app: '{{ application_name }}'
      service: '{{ kieserver_service_name }}'
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ kieserver_db_size }}'
  when:
    - kieserver_db_size != ""
    - kieserver_db_type == "H2"

- name: "[KIE SERVER] set db facts for any DB"
  set_fact:
    # e.g. authoring-kieserver-postgresql
    kieserver_db_deployment: '{{ kieserver_deployment_name }}-{{ kieserver_db_type | lower }}'
    # e.g. rhpam-kieserver-postgresql
    kieserver_db_service: '{{ kieserver_service_name }}-{{ kieserver_db_type | lower }}'

- name: "[KIE SERVER] call PostgreSQL role"
  include_role:
    name: deploy-postgresql
  vars:
    service_name: '{{ kieserver_db_service }}'
    deployment_name: '{{ kieserver_db_deployment }}'
    postgresql_volume_size: '{{ kieserver_db_size }}'
    postgresql_database: '{{ kieserver_db_name }}'
    postgresql_user: '{{ kieserver_db_user }}'
    postgresql_pwd: '{{ kieserver_db_pwd }}'
  when: kieserver_db_type == "PostgreSQL"

- name: "[KIE SERVER] deploy kieserver"
  block:
    - name: "[KIE SERVER] process deployment config template"
      template:
        src: kieserver-dc.yml.j2
        dest: '{{ tmp_folder }}/kieserver-dc.yml'
      register: dc_raw

    - name: "[KIE SERVER] create deployment config from template"
      openshift_v1_deployment_config:
        name: '{{ kieserver_deployment_name }}'
        namespace: '{{ namespace }}'
        state: present
        src: '{{ dc_raw.dest | default(dc_raw.path) }}'
  when: state == "present"

- name: "[KIE SERVER] remove KIE Server deployment config"
  openshift_v1_deployment_config:
    name: '{{ kieserver_deployment_name }}'
    namespace: '{{ namespace }}'
    state: absent
  when: state == "absent"
