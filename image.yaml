schema_version: 1

name: "rhpam-7/rhpam7-apb"
description: "Red Hat Business Central 7.2 OpenShift Ansible Playbook Bundle"
version: "1.0"
from: "openshift3/apb-base:v3.11"
labels:
  - name: "com.redhat.component"
    value: "rhpam-apb"
  - name: "io.k8s.description"
    value: "Platform for running Red Hat Process Automation Manager"
  - name: "io.k8s.display-name"
    value: "Red Hat Process Automation Manager 7.2"
  - name: "io.openshift.tags"
    value: "javaee,eap,eap7,rhpam,rhpam7,apb"
  - name: "com.redhat.apb.spec"
    value: "LS0tCiMgQ29tbW9uIENyZWRlbnRpYWxzCl9hcGJfa2llX2FkbWluX3VzZXI6ICZfYXBiX2tpZV9hZG1pbl91c2VyCiAgbmFtZTogYXBiX2tpZV9hZG1pbl91c2VyCiAgdGl0bGU6IEFkbWluIFVzZXJuYW1lCiAgZGVzY3JpcHRpb246IEFkbWluIHVzZXIgbmFtZSBmb3IgQnVzaW5lc3MgQ2VudHJhbCBhbmQgUHJvY2VzcyBTZXJ2ZXIKICByZXF1aXJlZDogdHJ1ZQogIHR5cGU6IHN0cmluZwogIGRlZmF1bHQ6IGFkbWluVXNlcgpfYXBiX2tpZV9hZG1pbl9wd2Q6ICZfYXBiX2tpZV9hZG1pbl9wd2QKICBuYW1lOiBhcGJfa2llX2FkbWluX3B3ZAogIHRpdGxlOiBBZG1pbiBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBBZG1pbiB1c2VyIHBhc3N3b3JkIGZvciBCdXNpbmVzcyBDZW50cmFsIGFuZCBQcm9jZXNzIFNlcnZlci4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV90eXBlOiBwYXNzd29yZAojIEltYWdlU3RyZWFtcwpfYXBiX2ltYWdlX3N0cmVhbV90YWc6ICZfYXBiX2ltYWdlX3N0cmVhbV90YWcKICBuYW1lOiBhcGJfaW1hZ2Vfc3RyZWFtX3RhZwogIHRpdGxlOiBJbWFnZSB2ZXJzaW9uCiAgZGVzY3JpcHRpb246IFRhZyB2ZXJzaW9uIG9mIHRoZSBJbWFnZVN0cmVhbSB0byB1c2UuIEl0IG11c3QgZXhpc3QgaW4gdGhlIG9wZW5zaGlmdCBuYW1lc3BhY2UuCiAgcmVxdWlyZWQ6IHRydWUKICB0eXBlOiBzdHJpbmcKICBkZWZhdWx0OiAnMS4wJwojIEhBCl9hcGJfcmVwbGljYXM6ICZfYXBiX3JlcGxpY2FzCiAgdGl0bGU6IE51bWJlciBvZiByZXBsaWNhcwogIGRlc2NyaXB0aW9uOiBOdW1iZXIgb2YgUmVwbGljYXMgdGhhdCB3aWxsIGJlIGluaXRpYWxseSBkZXBsb3llZAogIHJlcXVpcmVkOiB0cnVlCiAgdHlwZTogbnVtYmVyCiAgZGVmYXVsdDogMwojIEV4dGVybmFsIE1hdmVuIFJlcG9zaXRvcnkKX2FwYl9tYXZlbl9yZXBvX3VybDogJl9hcGJfbWF2ZW5fcmVwb191cmwKICBuYW1lOiBhcGJfbWF2ZW5fcmVwb191cmwKICB0aXRsZTogTWF2ZW4gUmVwb3NpdG9yeSBVUkwKICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgTWF2ZW4gUmVwb3NpdG9yeSBVUkwuIExlYXZlIGVtcHR5IHRvIHVzZSB0aGUgcmVwb3NpdG9yeSBwcm92aWRlZCBieSBCdXNpbmVzcyBDZW50cmFsCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogRXh0ZXJuYWwgTWF2ZW4gUmVwb3NpdG9yeQpfYXBiX21hdmVuX3JlcG9fdXNlcjogJl9hcGJfbWF2ZW5fcmVwb191c2VyCiAgbmFtZTogYXBiX21hdmVuX3JlcG9fdXNlcgogIHRpdGxlOiBNYXZlbiBSZXBvc2l0b3J5IFVzZXJuYW1lCiAgZGVzY3JpcHRpb246IFVzZXJuYW1lIHRvIHVzZSB0byBpbnRlcmFjdCB3aXRoIHRoZSBleHRlcm5hbCBNYXZlbiByZXBvc2l0b3J5LgogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEV4dGVybmFsIE1hdmVuIFJlcG9zaXRvcnkKX2FwYl9tYXZlbl9yZXBvX3B3ZDogJl9hcGJfbWF2ZW5fcmVwb19wd2QKICBuYW1lOiBhcGJfbWF2ZW5fcmVwb19wd2QKICB0aXRsZTogTWF2ZW4gUmVwb3NpdG9yeSBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBQYXNzd29yZCB0byB1c2UgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgZXh0ZXJuYWwgTWF2ZW4gcmVwb3NpdG9yeS4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogRXh0ZXJuYWwgTWF2ZW4gUmVwb3NpdG9yeQojIEdlbmVyaWMgS2V5c3RvcmUgcGFyYW1ldGVycwpfYXBiX3NlY3JldF9uYW1lOiAmX2FwYl9zZWNyZXRfbmFtZQogIHRpdGxlOiBTZWNyZXQgTmFtZQogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBzZWNyZXQgY29udGFpbmluZyB0aGUga2V5c3RvcmUgdG8gYmUgdXNlZCBieSB0aGUgc2VydmVyIHRvIGFjY2VwdCBIVFRQUyBjb25uZWN0aW9ucy4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCl9hcGJfa2V5c3RvcmVfbmFtZTogJl9hcGJfa2V5c3RvcmVfbmFtZQogIHRpdGxlOiBLZXlzdG9yZSBGaWxlIE5hbWUKICBkZXNjcmlwdGlvbjogTmFtZSBvZiB0aGUga2V5c3RvcmUgZmlsZSBjb250YWluaW5nIHRoZSBjZXJ0aWZpY2F0ZSB0byBiZSB1c2VkIGJ5IHRoZSBzZXJ2ZXIgdG8gYWNjZXB0IEhUVFBTIGNvbm5lY3Rpb25zLiBJZiBhIHNlY3JldCBuYW1lIGlzIG5vdCBwcm92aWRlZCwgdGhlIHNlcnZlciBnZW5lcmF0ZXMgYSBzZWNyZXQgd2l0aCB0aGlzIGtleXN0b3JlIGZpbGUgbmFtZS4KICByZXF1aXJlZDogdHJ1ZQogIHR5cGU6IHN0cmluZwogIGRlZmF1bHQ6IGtleXN0b3JlLmprcwpfYXBiX2tleXN0b3JlX2FsaWFzOiAmX2FwYl9rZXlzdG9yZV9hbGlhcwogIHRpdGxlOiBLZXlzdG9yZSBjZXJ0aWZpY2F0ZSBhbGlhcwogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBjZXJ0aWZpY2F0ZSBhbGlhcyBpbmNsdWRlZCBpbiB0aGUga2V5c3RvcmUgdG8gYmUgdXNlZCBieSB0aGUgc2VydmVyIHRvIGFjY2VwdCBIVFRQUyBjb25uZWN0aW9ucy4gSWYgYSBzZWNyZXQgbmFtZSBpcyBub3QgcHJvdmlkZWQsIHRoZSBzZXJ2ZXIgZ2VuZXJhdGVzIGEgc2VyZXQgd2l0aCB0aGlzIGFsaWFzLgogIHJlcXVpcmVkOiB0cnVlCiAgdHlwZTogc3RyaW5nCiAgZGVmYXVsdDogamJvc3MKX2FwYl9rZXlzdG9yZV9wd2Q6ICZfYXBiX2tleXN0b3JlX3B3ZAogIHRpdGxlOiBLZXlzdG9yZSBhbmQgQ2VydGlmaWNhdGUgUGFzc3dvcmQKICBkZXNjcmlwdGlvbjogUGFzc3dvcmQgcHJvdGVjdGluZyBib3RoIHRoZSBLZXlzdG9yZSBhbmQgdGhlIENlcnRpZmljYXRlLiBHZW5lcmF0ZWQgaWYgZW1wdHkKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCl9hcGJfdm9sdW1lX3NpemU6ICZfYXBiX3ZvbHVtZV9zaXplCiAgdGl0bGU6IFdvcmtzcGFjZSBTdG9yYWdlIFNpemUKICByZXF1aXJlZDogdHJ1ZQogIHR5cGU6IHN0cmluZwogIHBhdHRlcm46ICJeWzAtOV0rW21NZ0d0VF1pPyQiCl9hcGJfaG9zdG5hbWU6ICZfYXBiX2hvc3RuYW1lCiAgdGl0bGU6IFB1YmxpYyBIb3N0bmFtZQogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwojIEJ1c2luZXNzIENlbnRyYWwKX2FwYl9idXNpbmVzc2NlbnRyYWxfaG9zdG5hbWU6ICZfYXBiX2J1c2luZXNzY2VudHJhbF9ob3N0bmFtZQogIDw8OiAqX2FwYl9ob3N0bmFtZQogIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfaG9zdG5hbWUKICBkZXNjcmlwdGlvbjogUHVibGljIGhvc3RuYW1lIGZvciBCdXNpbmVzcyBDZW50cmFsLiBHZW5lcmF0ZWQgaWYgZW1wdHkKIyBHaXQgSG9va3MKX2FwYl9naXRfaG9va3NfZGlyOiAmX2FwYl9naXRfaG9va3NfZGlyCiAgbmFtZTogYXBiX2dpdF9ob29rc19kaXIKICB0aXRsZTogR2l0IGhvb2tzIGRpcmVjdG9yeQogIGRlc2NyaXB0aW9uOiBUaGUgZGlyZWN0b3J5IHRvIHVzZSBmb3IgZ2l0IGhvb2tzLCBpZiByZXF1aXJlZC4gZS5nLiAvb3B0L2VhcC9zdGFuZGFsb25lL2RhdGEva2llL2dpdC9ob29rcwogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKX2FwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb191c2VyOiAmX2FwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb191c2VyCiAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9tYXZlbl9yZXBvX3VzZXIKICB0aXRsZTogTWF2ZW4gUmVwb3NpdG9yeSBVc2VybmFtZQogIGRlc2NyaXB0aW9uOiBVc2VybmFtZSB0byB1c2UgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgQnVzaW5lc3MgQ2VudHJhbCBNYXZlbiByZXBvc2l0b3J5LgogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRlZmF1bHQ6IG1hdmVuVXNlcgogIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKX2FwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb19wd2Q6ICZfYXBiX2J1c2luZXNzY2VudHJhbF9tYXZlbl9yZXBvX3B3ZAogIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb19wd2QKICB0aXRsZTogTWF2ZW4gUmVwb3NpdG9yeSBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBQYXNzd29yZCB0byB1c2UgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgQnVzaW5lc3MgQ2VudHJhbCBNYXZlbiByZXBvc2l0b3J5LiBHZW5lcmF0ZWQgaWYgZW1wdHkKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAojIFByb2Nlc3MgU2VydmVyCl9hcGJfa2llc2VydmVyX2ltYWdlX3N0cmVhbV9uYW1lOiAmX2FwYl9raWVzZXJ2ZXJfaW1hZ2Vfc3RyZWFtX25hbWUKICBuYW1lOiBhcGJfa2llc2VydmVyX2ltYWdlX3N0cmVhbV9uYW1lCiAgdGl0bGU6IFByb2Nlc3MgU2VydmVyIEltYWdlIFN0cmVhbSBOYW1lCiAgZGVzY3JpcHRpb246IEltYWdlIFN0cmVhbSBOYW1lIHRvIHVzZSBmb3IgUHJvY2VzcyBTZXJ2ZXIuIElmIHlvdSBoYXZlIGdlbmVyYXRlZCBhIGN1c3RvbSBpbWFnZSAoZm9yIGV4YW1wbGUsIHRvIHByb3ZpZGUgYSBkYXRhYmFzZSBzZXJ2ZXIgZHJpdmVyKSwgeW91IGNhbiBjaGFuZ2UgdGhpcyBwYXJhbWV0ZXIgdG8gdXNlIGl0LgogIHJlcXVpcmVkOiB0cnVlCiAgdHlwZTogc3RyaW5nCiAgZGVmYXVsdDogcmhwYW03Mi1raWVzZXJ2ZXItb3BlbnNoaWZ0CiAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKX2FwYl9raWVzZXJ2ZXJfdXNlcjogJl9hcGJfa2llc2VydmVyX3VzZXIKICBuYW1lOiBhcGJfa2llc2VydmVyX3VzZXIKICB0aXRsZTogUHJvY2VzcyBTZXJ2ZXIgVXNlcm5hbWUKICBkZXNjcmlwdGlvbjogVXNlciB0byBpbnRlcmFjdCB3aXRoIHRoZSBQcm9jZXNzIFNlcnZlciB1c2luZyB0aGUgUkVTVCBBUEkKICByZXF1aXJlZDogdHJ1ZQogIHR5cGU6IHN0cmluZwogIGRlZmF1bHQ6IGV4ZWN1dGlvblVzZXIKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl9wd2Q6ICZfYXBiX2tpZXNlcnZlcl9wd2QKICBuYW1lOiBhcGJfa2llc2VydmVyX3B3ZAogIHRpdGxlOiBQcm9jZXNzIFNlcnZlciBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBVc2VyIHBhc3N3b3JkIHRvIGludGVyYWN0IHdpdGggdGhlIFByb2Nlc3MgU2VydmVyIHVzaW5nIHRoZSBSRVNUIEFQSS4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV90eXBlOiBwYXNzd29yZAogIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCl9hcGJfa2llc2VydmVyX2hvc3RuYW1lOiAmX2FwYl9raWVzZXJ2ZXJfaG9zdG5hbWUKICA8PDogKl9hcGJfaG9zdG5hbWUKICBuYW1lOiBhcGJfa2llc2VydmVyX2hvc3RuYW1lCiAgZGVzY3JpcHRpb246IFB1YmxpYyBob3N0bmFtZSBmb3IgUHJvY2VzcyBTZXJ2ZXIuIEdlbmVyYXRlZCBpZiBlbXB0eQpfYXBiX2tpZXNlcnZlcl9kYl90eXBlOiAmX2FwYl9raWVzZXJ2ZXJfZGJfdHlwZQogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfZGJfdHlwZQogIHRpdGxlOiBEYXRhYmFzZSBUeXBlCiAgZGVzY3JpcHRpb246IERhdGFiYXNlIFR5cGUgdG8gcGVyc2lzdCB0aGUgUHJvY2VzcyBTZXJ2ZXIgcnVudGltZSBpbmZvcm1hdGlvbi4gRE8gTk9UIFVTRSBIMiBmb3IgZGVwbG95aW5nIG1vcmUgdGhhbiAxIGluc3RhbmNlIG9mIFByb2Nlc3MgU2VydmVyLiBGb3IgSDIsIFBvc3RncmVTUUwsIGFuZCBNeVNRTCB0aGUgZGF0YWJhc2Ugc2VydmVyIHdpbGwgYmUgZGVwbG95ZWQgaW4gYSBwb2QuIFRvIHVzZSBhIGRhdGFiYXNlIHNlcnZlciB0aGF0IGlzIGRlcGxveWVkIGVsc2V3aGVyZSwgc2VsZWN0IEV4dGVybmFsLgogIHJlcXVpcmVkOiB0cnVlCiAgdHlwZTogZW51bQogIGVudW06IFsgJ0gyJywgJ1Bvc3RncmVTUUwnLCAnTXlTUUwnLCAnRXh0ZXJuYWwnIF0KICBkZWZhdWx0OiBQb3N0Z3JlU1FMCiAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKX2FwYl9raWVzZXJ2ZXJfZGJfc2l6ZTogJl9hcGJfa2llc2VydmVyX2RiX3NpemUKICA8PDogKl9hcGJfdm9sdW1lX3NpemUKICBuYW1lOiBhcGJfa2llc2VydmVyX2RiX3NpemUKICB0aXRsZTogRGF0YWJhc2UgU3RvcmFnZSBTaXplCiAgZGVzY3JpcHRpb246IFBlcnNpc3RlbnQgVm9sdW1lIENsYWltIHNpemUgdG8gY3JlYXRlIGZvciB0aGUgRGF0YWJhc2UuIEZvciBleGFtcGxlLCAxR2kuIElnbm9yZWQgaWYgRXh0ZXJuYWwgaXMgc2VsZWN0ZWQKICBkZWZhdWx0OiAxR2kKICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kcml2ZXI6ICZfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kcml2ZXIKICBuYW1lOiBhcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2RyaXZlcgogIHRpdGxlOiBEcml2ZXIgbmFtZQogIGRlc2NyaXB0aW9uOiBEYXRhYmFzZSBkcml2ZXIgdHlwZS4gUmVxdWlyZWQgZm9yIEV4dGVybmFsIGRhdGFiYXNlLiBGb3IgZXhhbXBsZSwgbXlzcWwgb3IgcG9zdGdyZXNxbAogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEV4dGVybmFsIERhdGFiYXNlIChvbmx5IGlmIERhdGFiYXNlIHR5cGUgaXMgRXh0ZXJuYWwpCl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2RpYWxlY3Q6ICZfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kaWFsZWN0CiAgbmFtZTogYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kaWFsZWN0CiAgdGl0bGU6IERpYWxlY3QgY2xhc3MKICBkZXNjcmlwdGlvbjogSGliZXJuYXRlIGRpYWxlY3QgY2xhc3MgdG8gdXNlLiBSZXF1aXJlZCBmb3IgRXh0ZXJuYWwgZGF0YWJhc2UuIEZvciBleGFtcGxlLCBvcmcuaGliZXJuYXRlLmRpYWxlY3QuTXlTUUw1RGlhbGVjdAogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEV4dGVybmFsIERhdGFiYXNlIChvbmx5IGlmIERhdGFiYXNlIHR5cGUgaXMgRXh0ZXJuYWwpCl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2hvc3Q6ICZfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgbmFtZTogYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgdGl0bGU6IEhvc3QKICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgZGF0YWJhc2Ugc2VydmVyIGhvc3QuIFJlcXVpcmVkIGZvciBFeHRlcm5hbCBkYXRhYmFzZS4gRm9yIGV4YW1wbGUsIDEyNy4wLjAuMQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IEV4dGVybmFsIERhdGFiYXNlIChvbmx5IGlmIERhdGFiYXNlIHR5cGUgaXMgRXh0ZXJuYWwpCl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX3BvcnQ6ICZfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9wb3J0CiAgbmFtZTogYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9wb3J0CiAgdGl0bGU6IFBvcnQKICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgZGF0YWJhc2Ugc2VydmVyIHBvcnQuIFJlcXVpcmVkIGZvciBFeHRlcm5hbCBkYXRhYmFzZS4gRm9yIGV4YW1wbGUsIDMzMDYKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBFeHRlcm5hbCBEYXRhYmFzZSAob25seSBpZiBEYXRhYmFzZSB0eXBlIGlzIEV4dGVybmFsKQpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9uYW1lOiAmX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogIG5hbWU6IGFwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogIHRpdGxlOiBEYXRhYmFzZSBOYW1lCiAgZGVzY3JpcHRpb246IEV4dGVybmFsIERhdGFiYXNlIG5hbWUuIFJlcXVpcmVkIGZvciBFeHRlcm5hbCBkYXRhYmFzZS4gRm9yIGV4YW1wbGUsIHJocGFtCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogRXh0ZXJuYWwgRGF0YWJhc2UgKG9ubHkgaWYgRGF0YWJhc2UgdHlwZSBpcyBFeHRlcm5hbCkKX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfdXJsOiAmX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfdXJsCiAgbmFtZTogYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl91cmwKICB0aXRsZTogRGF0YWJhc2UgSkRCQyBVUkwKICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgZGF0YWJhc2Ugc2VydmVyIEpEQkMgVVJMLiBSZXF1aXJlZCBmb3IgRXh0ZXJuYWwgZGF0YWJhc2UuIEZvciBleGFtcGxlLCBqZGJjOm15c3FsOjEyNy4wLjAuMTozMzA2L3JocGFtCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogRXh0ZXJuYWwgRGF0YWJhc2UgKG9ubHkgaWYgRGF0YWJhc2UgdHlwZSBpcyBFeHRlcm5hbCkKIyBFeHRlcm5hbCBTZXJ2aWNlcyBJbnRlZ3JhdGlvbgpfYXBiX3N2YzogJl9hcGJfc3ZjCiAgdGl0bGU6IFNlcnZpY2UgbmFtZQogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBTZXJ2aWNlCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCl9hcGJfaG9zdDogJl9hcGJfaG9zdAogIHRpdGxlOiBIb3N0CiAgZGVzY3JpcHRpb246IEhvc3QKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKX2FwYl9wb3J0OiAmX2FwYl9wb3J0CiAgdGl0bGU6IEhvc3QgcG9ydAogIGRlc2NyaXB0aW9uOiBIb3N0IHBvcnQKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKX2FwYl9wcm90b2NvbF90eXBlOiAmX2FwYl9wcm90b2NvbF90eXBlCiAgdGl0bGU6IEhvc3QgUHJvdG9jb2wKICBkZXNjcmlwdGlvbjogSG9zdCBwcm90b2NvbCAoaHR0cC9odHRwcykKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBlbnVtCiAgZW51bTogWyAnaHR0cCcsICdodHRwcycgXQojIFJvdXRlcgpfYXBiX3JvdXRlcl9zdmM6ICZfYXBiX3JvdXRlcl9zdmMKICA8PDogKl9hcGJfc3ZjCiAgbmFtZTogYXBiX3JvdXRlcl9zdmMKICBkaXNwbGF5X2dyb3VwOiBSb3V0ZXIgSW50ZWdyYXRpb24KX2FwYl9yb3V0ZXJfaG9zdDogJl9hcGJfcm91dGVyX2hvc3QKICA8PDogKl9hcGJfaG9zdAogIG5hbWU6IGFwYl9yb3V0ZXJfaG9zdAogIGRpc3BsYXlfZ3JvdXA6IFJvdXRlciBJbnRlZ3JhdGlvbgpfYXBiX3JvdXRlcl9wb3J0OiAmX2FwYl9yb3V0ZXJfcG9ydAogIDw8OiAqX2FwYl9wb3J0CiAgbmFtZTogYXBiX3JvdXRlcl9wb3J0CiAgZGlzcGxheV9ncm91cDogUm91dGVyIEludGVncmF0aW9uCl9hcGJfcm91dGVyX3Byb3RvY29sOiAmX2FwYl9yb3V0ZXJfcHJvdG9jb2wKICA8PDogKl9hcGJfcHJvdG9jb2xfdHlwZQogIG5hbWU6IGFwYl9yb3V0ZXJfcHJvdG9jb2wKICBkaXNwbGF5X2dyb3VwOiBSb3V0ZXIgSW50ZWdyYXRpb24KIyBDb250cm9sbGVyCl9hcGJfY29udHJvbGxlcl9zdmM6ICZfYXBiX2NvbnRyb2xsZXJfc3ZjCiAgPDw6ICpfYXBiX3N2YwogIG5hbWU6IGFwYl9jb250cm9sbGVyX3N2YwogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX2hvc3Q6ICZfYXBiX2NvbnRyb2xsZXJfaG9zdAogIDw8OiAqX2FwYl9ob3N0CiAgbmFtZTogYXBiX2NvbnRyb2xsZXJfaG9zdAogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX3BvcnQ6ICZfYXBiX2NvbnRyb2xsZXJfcG9ydAogIDw8OiAqX2FwYl9wb3J0CiAgbmFtZTogYXBiX2NvbnRyb2xsZXJfcG9ydAogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX3Byb3RvY29sOiAmX2FwYl9jb250cm9sbGVyX3Byb3RvY29sCiAgPDw6ICpfYXBiX3Byb3RvY29sX3R5cGUKICBuYW1lOiBhcGJfY29udHJvbGxlcl9wcm90b2NvbAogIGRpc3BsYXlfZ3JvdXA6IENvbnRyb2xsZXIgSW50ZWdyYXRpb24KX2FwYl9jb250cm9sbGVyX3Rva2VuOiAmX2FwYl9jb250cm9sbGVyX3Rva2VuCiAgbmFtZTogYXBiX2NvbnRyb2xsZXJfdG9rZW4KICB0aXRsZTogQ29udHJvbGxlciBBdXRoIFRva2VuCiAgZGVzY3JpcHRpb246IENvbnRyb2xsZXIgYXV0aGVudGljYXRpb24gVG9rZW4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBDb250cm9sbGVyIEludGVncmF0aW9uCl9hcGJfY29udHJvbGxlcl91c2VyOiAmX2FwYl9jb250cm9sbGVyX3VzZXIKICBuYW1lOiBhcGJfY29udHJvbGxlcl91c2VyCiAgdGl0bGU6IENvbnRyb2xsZXIgVXNlcm5hbWUKICBkZXNjcmlwdGlvbjogVXNlcm5hbWUgdG8gYWNjZXNzIHRoZSBDb250cm9sbGVyCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGVmYXVsdDogbW9uaXRvclVzZXIKX2FwYl9jb250cm9sbGVyX3B3ZDogJl9hcGJfY29udHJvbGxlcl9wd2QKICBuYW1lOiBhcGJfY29udHJvbGxlcl9wd2QKICB0aXRsZTogQ29udHJvbGxlciBQYXNzd29yZAogIGRlc2NyaXB0aW9uOiBVc2VyIHBhc3N3b3JkIHRvIGFjY2VzcyB0aGUgQ29udHJvbGxlci4gR2VuZXJhdGVkIGlmIGVtcHR5LgogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfdHlwZTogcGFzc3dvcmQKIyBSSC1TU08KX2FwYl9zc29fdXJsOiAmX2FwYl9zc29fdXJsCiAgbmFtZTogYXBiX3Nzb191cmwKICB0aXRsZTogUkgtU1NPIFVSTAogIGRlc2NyaXB0aW9uOiBSZWQgSGF0IFNpbmdsZSBTaWduLU9uIChTU08pIFVSTC4gTGVhdmUgZW1wdHkgdG8gYXZvaWQgdXNpbmcgU1NPLiBGb3IgZXhhbXBsZSwgaHR0cHM6Ly9yaHNzby5leGFtcGxlLmNvbS9hdXRoCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fcmVhbG06ICZfYXBiX3Nzb19yZWFsbQogIG5hbWU6IGFwYl9zc29fcmVhbG0KICB0aXRsZTogUkgtU1NPIFJlYWxtCiAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gUmVhbG0gbmFtZS4gRm9yIGV4YW1wbGUsIHJocGFtCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fY2xpZW50OiAmX2FwYl9zc29fY2xpZW50CiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fY2xpZW50X3NlY3JldDogJl9hcGJfc3NvX2NsaWVudF9zZWNyZXQKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fdXNlcjogJl9hcGJfc3NvX3VzZXIKICBuYW1lOiBhcGJfc3NvX3VzZXIKICB0aXRsZTogUkgtU1NPIEFkbWluIFVzZXIKICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBVc2VyIHRvIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSBDbGllbnQgaWYgaXQgZG9lc24ndCBleGlzdC4gVGhlIHVzZXIgbXVzdCBiZSBhYmxlIHRvIGNyZWF0ZSBzZWNyZXRzIG9uIHRoZSBnaXZlbiByZWFsbS4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBSZWQgSGF0IC0gU2luZ2xlIFNpZ24tT24gKE9wdGlvbmFsKQpfYXBiX3Nzb19wd2Q6ICZfYXBiX3Nzb19wd2QKICBuYW1lOiBhcGJfc3NvX3B3ZAogIHRpdGxlOiBSSC1TU08gQWRtaW4gUGFzc3dvcmQKICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBQYXNzd29yZCB0byB1c2UgdG8gY3JlYXRlIHRoZSBDbGllbnQgaWYgaXQgZG9lc24ndCBleGlzdC4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKX2FwYl9zc29fZGlzYWJsZV9zc2xfY2VydF92YWxpZGF0aW9uOiAmX2FwYl9zc29fZGlzYWJsZV9zc2xfY2VydF92YWxpZGF0aW9uCiAgbmFtZTogYXBiX3Nzb19kaXNhYmxlX3NzbF9jZXJ0X3ZhbGlkYXRpb24KICB0aXRsZTogUkgtU1NPIERpc2FibGUgU1NMIFZhbGlkYXRpb24KICBkZXNjcmlwdGlvbjogRGlzYWJsZSBTU0wgQ2VydGlmaWNhdGUgVmFsaWRhdGlvbiB3aGVuIGNvbm5lY3RpbmcgdG8gUkgtU1NPCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogYm9vbGVhbgogIGRpc3BsYXlfZ3JvdXA6IFJlZCBIYXQgLSBTaW5nbGUgU2lnbi1PbiAoT3B0aW9uYWwpCl9hcGJfc3NvX3ByaW5jaXBhbF9hdHRyaWJ1dGU6ICZfYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCiAgbmFtZTogYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCiAgdGl0bGU6IFJILVNTTyBQcmluY2lwYWwgQXR0cmlidXRlCiAgZGVzY3JpcHRpb246IFByaW5jaXBhbCBhdHRyaWJ1dGUgdG8gdXNlIGFzIHVzZXJuYW1lCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogUmVkIEhhdCAtIFNpbmdsZSBTaWduLU9uIChPcHRpb25hbCkKIyBMREFQIEF1dGgKX2FwYl9hdXRoX2xkYXBfdXJsOiAmX2FwYl9hdXRoX2xkYXBfdXJsCiAgbmFtZTogYXBiX2F1dGhfbGRhcF91cmwKICB0aXRsZTogTERBUCBFbmRwb2ludAogIGRlc2NyaXB0aW9uOiBMREFQIEVuZHBvaW50IHRvIGNvbm5lY3QgZm9yIGF1dGhlbnRpY2F0aW9uLiBlLmcuICJsZGFwOi8vbXlsZGFwLmV4YW1wbGUuY29tIgogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9iaW5kX2RuOiAmX2FwYl9hdXRoX2xkYXBfYmluZF9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfYmluZF9kbgogIHRpdGxlOiBMREFQIEJpbmQgRE4KICBkZXNjcmlwdGlvbjogQmluZCBETiB1c2VkIGZvciBhdXRoZW50aWNhdGlvbi4gZS5nLiAidWlkPWFkbWluLG91PXVzZXJzLG91PWV4bWFtcGxlLG91PWNvbSIKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsOiAmX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9iaW5kX2NyZWRlbnRpYWwKICB0aXRsZTogTERBUCBCaW5kIENyZWRlbnRpYWxzCiAgZGVzY3JpcHRpb246IExEQVAgQ3JlZGVudGlhbHMgdXNlZCBmb3IgYXV0aGVudGljYXRpb24KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X3R5cGU6IHBhc3N3b3JkCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJpdHlfZG9tYWluOiAmX2FwYl9hdXRoX2xkYXBfamFhc19zZWN1cml0eV9kb21haW4KICBuYW1lOiBhcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJpdHlfZG9tYWluCiAgdGl0bGU6IExEQVAgSkFBUyBTZWN1cml0eSBEb21haW4KICBkZXNjcmlwdGlvbjogVGhlIEpNWCBPYmplY3ROYW1lIG9mIHRoZSBKYWFzU2VjdXJpdHlEb21haW4gdXNlZCB0byBkZWNyeXB0IHRoZSBwYXNzd29yZC4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfYmFzZV9jdHhfZG46ICZfYXBiX2F1dGhfbGRhcF9iYXNlX2N0eF9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfYmFzZV9jdHhfZG4KICB0aXRsZTogTERBUCBCYXNlIEROCiAgZGVzY3JpcHRpb246IExEQVAgQmFzZSBETiBvZiB0aGUgdG9wLWxldmVsIGNvbnRleHQgdG8gYmVnaW4gdGhlIHVzZXIgc2VhcmNoLiBlLmcuICJvdT11c2VycyxvdT1leGFtcGxlLG91PWNvbSIKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfYmFzZV9maWx0ZXI6ICZfYXBiX2F1dGhfbGRhcF9iYXNlX2ZpbHRlcgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfYmFzZV9maWx0ZXIKICB0aXRsZTogTERBUCBCYXNlIFNlYXJjaCBmaWx0ZXIKICBkZXNjcmlwdGlvbjogTERBUCBzZWFyY2ggZmlsdGVyIHVzZWQgdG8gbG9jYXRlIHRoZSBjb250ZXh0IG9mIHRoZSB1c2VyIHRvIGF1dGhlbnRpY2F0ZS4gVGhlIGlucHV0IHVzZXJuYW1lIG9yIHVzZXJETiBvYnRhaW5lZCBmcm9tIHRoZSBsb2dpbiBtb2R1bGUgY2FsbGJhY2sgaXMgc3Vic3RpdHV0ZWQgaW50byB0aGUgZmlsdGVyIGFueXdoZXJlIGEgezB9IGV4cHJlc3Npb24gaXMgdXNlZC4gQSBjb21tb24gZXhhbXBsZSBmb3IgdGhlIHNlYXJjaCBmaWx0ZXIgaXMgKHVpZD17MH0pLgogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfc2NvcGU6ICZfYXBiX2F1dGhfbGRhcF9zZWFyY2hfc2NvcGUKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3NlYXJjaF9zY29wZQogIHRpdGxlOiBMREFQIFNlYXJjaCBzY29wZQogIGRlc2NyaXB0aW9uOiBUaGUgc2VhcmNoIHNjb3BlIHRvIHVzZS4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBlbnVtCiAgZW51bTogWyAnU1VCVFJFRV9TQ09QRScsICdPQkpFQ1RfU0NPUEUnLCAnT05FTEVWRUxfU0NPUEUnIF0KICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfc2VhcmNoX3RpbWVfbGltaXQ6ICZfYXBiX2F1dGhfbGRhcF9zZWFyY2hfdGltZV9saW1pdAogIG5hbWU6IGFwYl9hdXRoX2xkYXBfc2VhcmNoX3RpbWVfbGltaXQKICB0aXRsZTogTERBUCBTZWFyY2ggdGltZSBsaW1pdAogIGRlc2NyaXB0aW9uOiBUaGUgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgZm9yIHVzZXIgb3Igcm9sZSBzZWFyY2hlcy4gZS5nLiAiMTAwMDAiCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogbnVtYmVyCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX2Rpc3Rpbmd1aXNoZWRfbmFtZV9hdHRyaWJ1dGU6ICZfYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgdGl0bGU6IExEQVAgRE4gYXR0cmlidXRlCiAgZGVzY3JpcHRpb246IFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgaW4gdGhlIHVzZXIgZW50cnkgdGhhdCBjb250YWlucyB0aGUgRE4gb2YgdGhlIHVzZXIuIFRoaXMgbWF5IGJlIG5lY2Vzc2FyeSBpZiB0aGUgRE4gb2YgdGhlIHVzZXIgaXRzZWxmIGNvbnRhaW5zIHNwZWNpYWwgY2hhcmFjdGVycywgYmFja3NsYXNoIGZvciBleGFtcGxlLCB0aGF0IHByZXZlbnQgY29ycmVjdCB1c2VyIG1hcHBpbmcuIElmIHRoZSBhdHRyaWJ1dGUgZG9lcyBub3QgZXhpc3QsIHRoZSBlbnRyeeKAmXMgRE4gaXMgdXNlZC4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfcGFyc2VfdXNlcm5hbWU6ICZfYXBiX2F1dGhfbGRhcF9wYXJzZV91c2VybmFtZQogIG5hbWU6IGFwYl9hdXRoX2xkYXBfcGFyc2VfdXNlcm5hbWUKICB0aXRsZTogTERBUCBQYXJzZSB1c2VybmFtZQogIGRlc2NyaXB0aW9uOiBBIGZsYWcgaW5kaWNhdGluZyBpZiB0aGUgRE4gaXMgdG8gYmUgcGFyc2VkIGZvciB0aGUgdXNlcm5hbWUuIElmIHNldCB0byB0cnVlLCB0aGUgRE4gaXMgcGFyc2VkIGZvciB0aGUgdXNlcm5hbWUuIElmIHNldCB0byBmYWxzZSB0aGUgRE4gaXMgbm90IHBhcnNlZCBmb3IgdGhlIHVzZXJuYW1lLiBUaGlzIG9wdGlvbiBpcyB1c2VkIHRvZ2V0aGVyIHdpdGggdXNlcm5hbWVCZWdpblN0cmluZyBhbmQgdXNlcm5hbWVFbmRTdHJpbmcuCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogYm9vbGVhbgogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9iZWdpbl9zdHJpbmc6ICZfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9iZWdpbl9zdHJpbmcKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3VzZXJuYW1lX2JlZ2luX3N0cmluZwogIHRpdGxlOiBMREFQIFVzZXJuYW1lIGJlZ2luIHN0cmluZwogIGRlc2NyaXB0aW9uOiBEZWZpbmVzIHRoZSBTdHJpbmcgd2hpY2ggaXMgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgRE4gdG8gcmV2ZWFsIHRoZSB1c2VybmFtZS4gVGhpcyBvcHRpb24gaXMgdXNlZCB0b2dldGhlciB3aXRoIHVzZXJuYW1lRW5kU3RyaW5nIGFuZCBvbmx5IHRha2VuIGludG8gYWNjb3VudCBpZiBwYXJzZVVzZXJuYW1lIGlzIHNldCB0byB0cnVlLgogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9lbmRfc3RyaW5nOiAmX2FwYl9hdXRoX2xkYXBfdXNlcm5hbWVfZW5kX3N0cmluZwogIG5hbWU6IGFwYl9hdXRoX2xkYXBfdXNlcm5hbWVfZW5kX3N0cmluZwogIHRpdGxlOiBMREFQIFVzZXJuYW1lIGVuZCBzdHJpbmcKICBkZXNjcmlwdGlvbjogRGVmaW5lcyB0aGUgU3RyaW5nIHdoaWNoIGlzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgZW5kIG9mIHRoZSBETiB0byByZXZlYWwgdGhlIHVzZXJuYW1lLiBUaGlzIG9wdGlvbiBpcyB1c2VkIHRvZ2V0aGVyIHdpdGggdXNlcm5hbWVFbmRTdHJpbmcgYW5kIG9ubHkgdGFrZW4gaW50byBhY2NvdW50IGlmIHBhcnNlVXNlcm5hbWUgaXMgc2V0IHRvIHRydWUuCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lkOiAmX2FwYl9hdXRoX2xkYXBfcm9sZV9hdHRyaWJ1dGVfaWQKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lkCiAgdGl0bGU6IExEQVAgUm9sZSBhdHRyaWJ1dGVJRAogIGRlc2NyaXB0aW9uOiBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgY29udGFpbmluZyB0aGUgdXNlciByb2xlcy4gZS5nLiAibWVtYmVyT2YiCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbjogJl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfcm9sZXNfY3R4X2RuCiAgdGl0bGU6IExEQVAgUm9sZXMgU2VhcmNoIEROCiAgZGVzY3JpcHRpb246IFRoZSBmaXhlZCBETiBvZiB0aGUgY29udGV4dCB0byBzZWFyY2ggZm9yIHVzZXIgcm9sZXMuIFRoaXMgaXMgbm90IHRoZSBETiB3aGVyZSB0aGUgYWN0dWFsIHJvbGVzIGFyZSwgYnV0IHRoZSBETiB3aGVyZSB0aGUgb2JqZWN0cyBjb250YWluaW5nIHRoZSB1c2VyIHJvbGVzIGFyZS4gRm9yIGV4YW1wbGUsIGluIGEgTWljcm9zb2Z0IEFjdGl2ZSBEaXJlY3Rvcnkgc2VydmVyLCB0aGlzIGlzIHRoZSBETiB3aGVyZSB0aGUgdXNlciBhY2NvdW50IGlzLgogIHJlcXVpcmVkOiBmYWxzZQogIHR5cGU6IHN0cmluZwogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcjogJl9hcGJfYXV0aF9sZGFwX3JvbGVfZmlsdGVyCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcgogIHRpdGxlOiBMREFQIFJvbGUgc2VhcmNoIGZpbHRlcgogIGRlc2NyaXB0aW9uOiBBIHNlYXJjaCBmaWx0ZXIgdXNlZCB0byBsb2NhdGUgdGhlIHJvbGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXV0aGVudGljYXRlZCB1c2VyLiBUaGUgaW5wdXQgdXNlcm5hbWUgb3IgdXNlckROIG9idGFpbmVkIGZyb20gdGhlIGxvZ2luIG1vZHVsZSBjYWxsYmFjayBpcyBzdWJzdGl0dXRlZCBpbnRvIHRoZSBmaWx0ZXIgYW55d2hlcmUgYSB7MH0gZXhwcmVzc2lvbiBpcyB1c2VkLiBUaGUgYXV0aGVudGljYXRlZCB1c2VyRE4gaXMgc3Vic3RpdHV0ZWQgaW50byB0aGUgZmlsdGVyIGFueXdoZXJlIGEgezF9IGlzIHVzZWQuIEFuIGV4YW1wbGUgc2VhcmNoIGZpbHRlciB0aGF0IG1hdGNoZXMgb24gdGhlIGlucHV0IHVzZXJuYW1lIGlzIChtZW1iZXI9ezB9KS4gQW4gYWx0ZXJuYXRpdmUgdGhhdCBtYXRjaGVzIG9uIHRoZSBhdXRoZW50aWNhdGVkIHVzZXJETiBpcyAobWVtYmVyPXsxfSkuCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JvbGVfcmVjdXJzaW9uOiAmX2FwYl9hdXRoX2xkYXBfcm9sZV9yZWN1cnNpb24KICBuYW1lOiBhcGJfYXV0aF9sZGFwX3JvbGVfcmVjdXJzaW9uCiAgdGl0bGU6IExEQVAgUm9sZSByZWN1cnNpb24KICBkZXNjcmlwdGlvbjogVGhlIG51bWJlciBvZiBsZXZlbHMgb2YgcmVjdXJzaW9uIHRoZSByb2xlIHNlYXJjaCB3aWxsIGdvIGJlbG93IGEgbWF0Y2hpbmcgY29udGV4dC4gRGlzYWJsZSByZWN1cnNpb24gYnkgc2V0dGluZyB0aGlzIHRvIDAuCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogbnVtYmVyCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX2RlZmF1bHRfcm9sZTogJl9hcGJfYXV0aF9sZGFwX2RlZmF1bHRfcm9sZQogIG5hbWU6IGFwYl9hdXRoX2xkYXBfZGVmYXVsdF9yb2xlCiAgdGl0bGU6IExEQVAgRGVmYXVsdCByb2xlCiAgZGVzY3JpcHRpb246IEEgcm9sZSBpbmNsdWRlZCBmb3IgYWxsIGF1dGhlbnRpY2F0ZWQgdXNlcnMKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfcm9sZV9uYW1lX2F0dHJpYnV0ZV9pZDogJl9hcGJfYXV0aF9sZGFwX3JvbGVfbmFtZV9hdHRyaWJ1dGVfaWQKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3JvbGVfbmFtZV9hdHRyaWJ1dGVfaWQKICB0aXRsZTogTERBUCBSb2xlIG5hbWUgYXR0cmlidXRlIElECiAgZGVzY3JpcHRpb246IE5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB3aXRoaW4gdGhlIHJvbGVDdHhETiBjb250ZXh0IHdoaWNoIGNvbnRhaW5zIHRoZSByb2xlIG5hbWUuIElmIHRoZSByb2xlQXR0cmlidXRlSXNETiBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSwgdGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGZpbmQgdGhlIHJvbGUgb2JqZWN04oCZcyBuYW1lIGF0dHJpYnV0ZS4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBMREFQIChPcHRpb25hbCkKX2FwYl9hdXRoX2xkYXBfcGFyc2Vfcm9sZV9uYW1lX2Zyb21fZG46ICZfYXBiX2F1dGhfbGRhcF9wYXJzZV9yb2xlX25hbWVfZnJvbV9kbgogIG5hbWU6IGFwYl9hdXRoX2xkYXBfcGFyc2Vfcm9sZV9uYW1lX2Zyb21fZG4KICB0aXRsZTogTERBUCBSb2xlIEROIGNvbnRhaW5zIHJvbGVOYW1lQXR0cmlidXRlSUQKICBkZXNjcmlwdGlvbjogQSBmbGFnIGluZGljYXRpbmcgaWYgdGhlIEROIHJldHVybmVkIGJ5IGEgcXVlcnkgY29udGFpbnMgdGhlIHJvbGVOYW1lQXR0cmlidXRlSUQuIElmIHNldCB0byB0cnVlLCB0aGUgRE4gaXMgY2hlY2tlZCBmb3IgdGhlIHJvbGVOYW1lQXR0cmlidXRlSUQuIElmIHNldCB0byBmYWxzZSwgdGhlIEROIGlzIG5vdCBjaGVja2VkIGZvciB0aGUgcm9sZU5hbWVBdHRyaWJ1dGVJRC4gVGhpcyBmbGFnIGNhbiBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiBMREFQIHF1ZXJpZXMuCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogYm9vbGVhbgogIGRpc3BsYXlfZ3JvdXA6IExEQVAgKE9wdGlvbmFsKQpfYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pc19kbjogJl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lzX2RuCiAgbmFtZTogYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pc19kbgogIHRpdGxlOiBMREFQIFJvbGUgQXR0cmlidXRlIElEIGlzIEROCiAgZGVzY3JpcHRpb246IFdoZXRoZXIgb3Igbm90IHRoZSByb2xlQXR0cmlidXRlSUQgY29udGFpbnMgdGhlIGZ1bGx5LXF1YWxpZmllZCBETiBvZiBhIHJvbGUgb2JqZWN0LiBJZiBmYWxzZSwgdGhlIHJvbGUgbmFtZSBpcyB0YWtlbiBmcm9tIHRoZSB2YWx1ZSBvZiB0aGUgcm9sZU5hbWVBdHRyaWJ1dGVJZCBhdHRyaWJ1dGUgb2YgdGhlIGNvbnRleHQgbmFtZS4gQ2VydGFpbiBkaXJlY3Rvcnkgc2NoZW1hcywgc3VjaCBhcyBNaWNyb3NvZnQgQWN0aXZlIERpcmVjdG9yeSwgcmVxdWlyZSB0aGlzIGF0dHJpYnV0ZSB0byBiZSBzZXQgdG8gdHJ1ZS4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBib29sZWFuCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9sZGFwX3JlZmVycmFsX3VzZXJfYXR0cmlidXRlX2lkX3RvX2NoZWNrOiAmX2FwYl9hdXRoX2xkYXBfcmVmZXJyYWxfdXNlcl9hdHRyaWJ1dGVfaWRfdG9fY2hlY2sKICBuYW1lOiBhcGJfYXV0aF9sZGFwX3JlZmVycmFsX3VzZXJfYXR0cmlidXRlX2lkX3RvX2NoZWNrCiAgdGl0bGU6IExEQVAgUmVmZXJyYWwgdXNlciBhdHRyaWJ1dGUgSUQKICBkZXNjcmlwdGlvbjogSWYgeW91IGFyZSBub3QgdXNpbmcgcmVmZXJyYWxzLCB0aGlzIG9wdGlvbiBjYW4gYmUgaWdub3JlZC4gV2hlbiB1c2luZyByZWZlcnJhbHMsIHRoaXMgb3B0aW9uIGRlbm90ZXMgdGhlIGF0dHJpYnV0ZSBuYW1lIHdoaWNoIGNvbnRhaW5zIHVzZXJzIGRlZmluZWQgZm9yIGEgY2VydGFpbiByb2xlLCBmb3IgZXhhbXBsZSBtZW1iZXIsIGlmIHRoZSByb2xlIG9iamVjdCBpcyBpbnNpZGUgdGhlIHJlZmVycmFsLiBVc2VycyBhcmUgY2hlY2tlZCBhZ2FpbnN0IHRoZSBjb250ZW50IG9mIHRoaXMgYXR0cmlidXRlIG5hbWUuIElmIHRoaXMgb3B0aW9uIGlzIG5vdCBzZXQsIHRoZSBjaGVjayB3aWxsIGFsd2F5cyBmYWlsLCBzbyByb2xlIG9iamVjdHMgY2Fubm90IGJlIHN0b3JlZCBpbiBhIHJlZmVycmFsIHRyZWUuCiAgcmVxdWlyZWQ6IGZhbHNlCiAgdHlwZTogc3RyaW5nCiAgZGlzcGxheV9ncm91cDogTERBUCAoT3B0aW9uYWwpCl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yb2xlc19wcm9wZXJ0aWVzOiAmX2FwYl9hdXRoX3JvbGVfbWFwcGVyX3JvbGVzX3Byb3BlcnRpZXMKICBuYW1lOiBhcGJfYXV0aF9yb2xlX21hcHBlcl9yb2xlc19wcm9wZXJ0aWVzCiAgdGl0bGU6IFJvbGVNYXBwaW5nIHJvbGVzUHJvcGVydGllcyBmaWxlIHBhdGgKICBkZXNjcmlwdGlvbjogV2hlbiBwcmVzZW50LCB0aGUgUm9sZU1hcHBpbmcgTG9naW4gTW9kdWxlIHdpbGwgYmUgY29uZmlndXJlZCB0byB1c2UgdGhlIHByb3ZpZGVkIGZpbGUuIFRoaXMgcHJvcGVydHkgZGVmaW5lcyB0aGUgZnVsbHktcXVhbGlmaWVkIGZpbGUgcGF0aCBhbmQgbmFtZSBvZiBhIHByb3BlcnRpZXMgZmlsZSBvciByZXNvdXJjZSB3aGljaCBtYXBzIHJvbGVzIHRvIHJlcGxhY2VtZW50IHJvbGVzLiBUaGUgZm9ybWF0IGlzIG9yaWdpbmFsX3JvbGU9cm9sZTEscm9sZTIscm9sZTMKICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBzdHJpbmcKICBkaXNwbGF5X2dyb3VwOiBSb2xlTWFwcGluZyAoT3B0aW9uYWwpCl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yZXBsYWNlX3JvbGU6ICZfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCiAgbmFtZTogYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCiAgdGl0bGU6IFJvbGVNYXBwaW5nIHJlcGxhY2VSb2xlIHByb3BlcnR5CiAgZGVzY3JpcHRpb246IFdoZXRoZXIgdG8gYWRkIHRvIHRoZSBjdXJyZW50IHJvbGVzLCBvciByZXBsYWNlIHRoZSBjdXJyZW50IHJvbGVzIHdpdGggdGhlIG1hcHBlZCBvbmVzLiBSZXBsYWNlcyBpZiBzZXQgdG8gdHJ1ZS4KICByZXF1aXJlZDogZmFsc2UKICB0eXBlOiBib29sZWFuCiAgZGlzcGxheV9ncm91cDogUm9sZU1hcHBpbmcgKE9wdGlvbmFsKQoKdmVyc2lvbjogMS4wCm5hbWU6IHJocGFtLWFwYgpkZXNjcmlwdGlvbjogUmVkIEhhdCBQcm9jZXNzIEF1dG9tYXRpb24gTWFuYWdlciAoQVBCKQpiaW5kYWJsZTogZmFsc2UKYXN5bmM6IHVuc3VwcG9ydGVkCm1ldGFkYXRhOgogIGRpc3BsYXlOYW1lOiBSZWQgSGF0IFByb2Nlc3MgQXV0b21hdGlvbiBNYW5hZ2VyIChBUEIpCiAgZG9jdW1lbnRhdGlvblVybDogaHR0cHM6Ly9kZXZlbG9wZXJzLnJlZGhhdC5jb20vcHJvZHVjdHMvYnBtc3VpdGUvZG9jcy1hbmQtYXBpcy8KICBsb25nRGVzY3JpcHRpb246CiAgICBBcyBhIHN5c3RlbSBlbmdpbmVlciwgeW91IGNhbiBkZXBsb3kgYSBSZWQgSGF0IFByb2Nlc3MgQXV0b21hdGlvbiBNYW5hZ2VyCiAgICBlbnZpcm9ubWVudCBvbiBSZWQgSGF0IE9wZW5TaGlmdCBDb250YWluZXIgUGxhdGZvcm0gdG8gcHJvdmlkZSBhbiBpbmZyYXN0cnVjdHVyZQogICAgdG8gZGV2ZWxvcCBvciBleGVjdXRlIHByb2Nlc3NlcyBhbmQgb3RoZXIgYnVzaW5lc3MgYXNzZXRzLgoKICAgIE1ha2Ugc3VyZSB0aGUgcmVxdWlyZWQgSW1hZ2VTdHJlYW1UYWdzIGV4aXN0IGluIHRoZSBvcGVuc2hpZnQgcHJvamVjdC4gU2VlIGJlbG93IGZvciB0aGUgcmVxdWlyZWQgaW1hZ2VzCiAgY29uc29sZS5vcGVuc2hpZnQuaW8vaWNvbkNsYXNzOiBpY29uLXByb2Nlc3NzZXJ2ZXIKICBwcm92aWRlckRpc3BsYXlOYW1lOiAiUmVkIEhhdCwgSW5jLiIKICBzZXJ2aWNlTmFtZTogcmhwYW0KICBkZXBlbmRlbmNpZXM6CiAgICAtICdyZWdpc3RyeS5hY2Nlc3MucmVkaGF0LmNvbS9yaHBhbS03L3JocGFtNzIta2llc2VydmVyLW9wZW5zaGlmdCcKICAgIC0gJ3JlZ2lzdHJ5LmFjY2Vzcy5yZWRoYXQuY29tL3JocGFtLTcvcmhwYW03Mi1idXNpbmVzc2NlbnRyYWwtb3BlbnNoaWZ0JwogICAgLSAncmVnaXN0cnkuYWNjZXNzLnJlZGhhdC5jb20vcmhwYW0tNy9yaHBhbTcyLWNvbnRyb2xsZXItb3BlbnNoaWZ0JwogICAgLSAncmVnaXN0cnkuYWNjZXNzLnJlZGhhdC5jb20vcmhwYW0tNy9yaHBhbTcyLXNtYXJ0cm91dGVyLW9wZW5zaGlmdCcKICAgIC0gJ3JlZ2lzdHJ5LmFjY2Vzcy5yZWRoYXQuY29tL3JocGFtLTcvcmhwYW03Mi1idXNpbmVzc2NlbnRyYWwtbW9uaXRvcmluZy1vcGVuc2hpZnQnCiAgICAtICdyZWdpc3RyeS5hY2Nlc3MucmVkaGF0LmNvbS9yaHNjbC9wb3N0Z3Jlc3FsLTEwLXJoZWw3JwogICAgLSAncmVnaXN0cnkuYWNjZXNzLnJlZGhhdC5jb20vcmhzY2wvbXlzcWwtNTctcmhlbDcnCnRhZ3M6CiAgLSBqYnBtCiAgLSByaHBhbQogIC0gcHJvY2Vzc3NlcnZlcgogIC0gYXV0aG9yaW5nCiAgLSBqYm9zcwpwbGFuczoKICAtIG5hbWU6IHRyaWFsCiAgICBkZXNjcmlwdGlvbjoKICAgICAgRGVwbG95IGFuIGVwaGVtZXJhbCBlbnZpcm9ubWVudCBmb3IgdGVzdGluZyBCdXNpbmVzcyBDZW50cmFsIGFuZCBQcm9jZXNzIFNlcnZlci4gQSBkZWZhdWx0IGBhZG1pblVzZXJgIHVzZXIgd2lsbCBiZSBjcmVhdGVkIHdpdGggdGhlIGBSZWRIYXRgIHBhc3N3b3JkLgogICAgICBJbiBjYXNlIHRoZSBnZW5lcmF0ZWQgcm91dGVzIG5lZWQgdG8gYmUgb3ZlcnJpZGRlbiwgaXQgaXMgcG9zc2libGUgdG8gc2V0IGN1c3RvbSByb3V0ZXMgZm9yIGJvdGggYXBwbGljYXRpb25zLgogICAgZnJlZTogdHJ1ZQogICAgbWV0YWRhdGE6CiAgICAgIGRpc3BsYXlOYW1lOiBFdmFsdWF0aW9uIEVudmlyb25tZW50CiAgICBwYXJhbWV0ZXJzOgogICAgICAtIDw8OiAqX2FwYl9idXNpbmVzc2NlbnRyYWxfaG9zdG5hbWUKICAgICAgICB0aXRsZTogQnVzaW5lc3MgQ2VudHJhbCBQdWJsaWMgSG9zdG5hbWUKICAgICAgLSA8PDogKl9hcGJfa2llc2VydmVyX2hvc3RuYW1lCiAgICAgICAgdGl0bGU6IFByb2Nlc3MgU2VydmVyIFB1YmxpYyBIb3N0bmFtZQogICAgICAtICpfYXBiX2ltYWdlX3N0cmVhbV90YWcKCiAgLSBuYW1lOiBhdXRob3JpbmcKICAgIGRlc2NyaXB0aW9uOgogICAgICBBbiBlbnZpcm9ubWVudCBmb3IgY3JlYXRpbmcgYW5kIG1vZGlmeWluZyBwcm9jZXNzZXMgdXNpbmcgQnVzaW5lc3MgQ2VudHJhbC4gSXQgY29uc2lzdHMgb2YKICAgICAgcG9kcyB0aGF0IHByb3ZpZGUgQnVzaW5lc3MgQ2VudHJhbCBmb3IgdGhlIGF1dGhvcmluZyB3b3JrIGFuZCBhIFByb2Nlc3MgU2VydmVyIGZvciB0ZXN0IGV4ZWN1dGlvbiBvZiB0aGUgcHJvY2Vzc2VzLgogICAgZnJlZTogdHJ1ZQogICAgbWV0YWRhdGE6CiAgICAgIGRpc3BsYXlOYW1lOiBBdXRob3JpbmcKICAgIHBhcmFtZXRlcnM6CiAgICAgICMgQ29tbW9uIENyZWRlbnRpYWxzCiAgICAgIC0gKl9hcGJfa2llX2FkbWluX3VzZXIKICAgICAgLSAqX2FwYl9raWVfYWRtaW5fcHdkCiAgICAgIC0gKl9hcGJfaW1hZ2Vfc3RyZWFtX3RhZwoKICAgICAgIyBCdXNpbmVzcyBDZW50cmFsCiAgICAgIC0gPDw6ICpfYXBiX3ZvbHVtZV9zaXplCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF92b2x1bWVfc2l6ZQogICAgICAgIGRlc2NyaXB0aW9uOiBTcGVjaWZ5IHRoZSBQZXJzaXN0ZW50IFZvbHVtZSBDbGFpbSBzaXplIHRvIGNyZWF0ZSBmb3Igc3RvcmluZyB0aGUgV29ya3NwYWNlLiBGb3IgZXhhbXBsZSwgMUdpCiAgICAgICAgZGVmYXVsdDogMUdpCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAogICAgICAjIEtleXN0b3JlIGFuZCBTZWNyZXQKICAgICAgLSA8PDogKl9hcGJfc2VjcmV0X25hbWUKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX3NlY3JldF9uYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9uYW1lCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9uYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9hbGlhcwogICAgICAgIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfa2V5c3RvcmVfYWxpYXMKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX3B3ZAogICAgICAgIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfa2V5c3RvcmVfcHdkCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAogICAgICAjIEhvc3RuYW1lCiAgICAgIC0gPDw6ICpfYXBiX2J1c2luZXNzY2VudHJhbF9ob3N0bmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKICAgICAgIyBHaXQgaG9va3MKICAgICAgLSAqX2FwYl9naXRfaG9va3NfZGlyCiAgICAgICMgT3RoZXIgdXNlcnMKICAgICAgLSA8PDogKl9hcGJfY29udHJvbGxlcl91c2VyCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbAogICAgICAtIDw8OiAqX2FwYl9jb250cm9sbGVyX3B3ZAogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwKICAgICAgLSAqX2FwYl9idXNpbmVzc2NlbnRyYWxfbWF2ZW5fcmVwb191c2VyCiAgICAgIC0gKl9hcGJfYnVzaW5lc3NjZW50cmFsX21hdmVuX3JlcG9fcHdkCgogICAgICAjIFByb2Nlc3MgU2VydmVyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2RiX3R5cGUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZGJfc2l6ZQoKICAgICAgIyBLZXlzdG9yZSBhbmQgU2VjcmV0CiAgICAgIC0gPDw6ICpfYXBiX3NlY3JldF9uYW1lCiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9zZWNyZXRfbmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX25hbWUKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX2tleXN0b3JlX25hbWUKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9hbGlhcwogICAgICAgIG5hbWU6IGFwYl9raWVzZXJ2ZXJfa2V5c3RvcmVfYWxpYXMKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9wd2QKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX2tleXN0b3JlX3B3ZAogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCgogICAgICAtICpfYXBiX2tpZXNlcnZlcl91c2VyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX3B3ZAogICAgICAtIDw8OiAqX2FwYl9raWVzZXJ2ZXJfaG9zdG5hbWUKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9pbWFnZV9zdHJlYW1fbmFtZQoKICAgICAgIyBFeHRlcm5hbCBEYXRhYmFzZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kcml2ZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfZGlhbGVjdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX3BvcnQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl91cmwKCiAgICAgICMgRXh0ZXJuYWwgTWF2ZW4gUmVwb3NpdG9yeQogICAgICAtICpfYXBiX21hdmVuX3JlcG9fdXJsCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb191c2VyCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb19wd2QKCiAgICAgICMgUkggLSBTU08KICAgICAgLSAqX2FwYl9zc29fdXJsCiAgICAgIC0gKl9hcGJfc3NvX3JlYWxtCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnQKICAgICAgICBuYW1lOiBhcGJfc3NvX2J1c2luZXNzY2VudHJhbF9jbGllbnQKICAgICAgICB0aXRsZTogUkgtU1NPIEJ1c2luZXNzIENlbnRyYWwgLSBDbGllbnQKICAgICAgICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBDbGllbnQgbmFtZSBmb3IgQnVzaW5lc3MgQ2VudHJhbC4gSWYgdGhlIHNlY3JldCwgdXNlciBhbmQgcGFzc3dvcmQgYXJlIHByb3ZpZGVkIGl0IHdpbGwgYmUgY3JlYXRlZC4gRm9yIGV4YW1wbGUsIGJ1c2luZXNzY2VudHJhbAogICAgICAtIDw8OiAqX2FwYl9zc29fY2xpZW50X3NlY3JldAogICAgICAgIG5hbWU6IGFwYl9zc29fYnVzaW5lc3NjZW50cmFsX2NsaWVudF9zZWNyZXQKICAgICAgICB0aXRsZTogUkgtU1NPIEJ1c2luZXNzIENlbnRyYWwgLSBDbGllbnQgU2VjcmV0CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IHNlY3JldCBmb3IgQnVzaW5lc3MgQ2VudHJhbC4KICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudAogICAgICAgIG5hbWU6IGFwYl9raWVzZXJ2ZXJfc3NvX2NsaWVudAogICAgICAgIHRpdGxlOiBSSC1TU08gUHJvY2VzcyBTZXJ2ZXIgLSBDbGllbnQKICAgICAgICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBDbGllbnQgbmFtZSBmb3IgUHJvY2VzcyBTZXJ2ZXIuIElmIHRoZSBzZWNyZXQsIHVzZXIgYW5kIHBhc3N3b3JkIGFyZSBwcm92aWRlZCBpdCB3aWxsIGJlIGNyZWF0ZWQuIEZvciBleGFtcGxlLCBraWVzZXJ2ZXIKICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudF9zZWNyZXQKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX3Nzb19jbGllbnRfc2VjcmV0CiAgICAgICAgdGl0bGU6IFJILVNTTyBQcm9jZXNzIFNlcnZlciAtIENsaWVudCBTZWNyZXQKICAgICAgICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBDbGllbnQgc2VjcmV0IGZvciBQcm9jZXNzIFNlcnZlci4KICAgICAgLSAqX2FwYl9zc29fdXNlcgogICAgICAtICpfYXBiX3Nzb19wd2QKICAgICAgLSAqX2FwYl9zc29fZGlzYWJsZV9zc2xfY2VydF92YWxpZGF0aW9uCiAgICAgIC0gKl9hcGJfc3NvX3ByaW5jaXBhbF9hdHRyaWJ1dGUKCiAgICAgICMgTERBUAogICAgICAtICpfYXBiX2F1dGhfbGRhcF91cmwKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmluZF9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iaW5kX2NyZWRlbnRpYWwKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfamFhc19zZWN1cml0eV9kb21haW4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmFzZV9jdHhfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmFzZV9maWx0ZXIKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfc2VhcmNoX3Njb3BlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3NlYXJjaF90aW1lX2xpbWl0CiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Rpc3Rpbmd1aXNoZWRfbmFtZV9hdHRyaWJ1dGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcGFyc2VfdXNlcm5hbWUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfdXNlcm5hbWVfYmVnaW5fc3RyaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3VzZXJuYW1lX2VuZF9zdHJpbmcKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9hdHRyaWJ1dGVfaWQKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZXNfY3R4X2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfZmlsdGVyCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfcmVjdXJzaW9uCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2RlZmF1bHRfcm9sZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX25hbWVfYXR0cmlidXRlX2lkCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3BhcnNlX3JvbGVfbmFtZV9mcm9tX2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lzX2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JlZmVycmFsX3VzZXJfYXR0cmlidXRlX2lkX3RvX2NoZWNrCgogICAgICAjIFJvbGVNYXBwaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yb2xlc19wcm9wZXJ0aWVzCiAgICAgIC0gKl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yZXBsYWNlX3JvbGUKCiAgLSBuYW1lOiBpbW11dGFibGUta2llCiAgICBkZXNjcmlwdGlvbjoKICAgICAgSW4gdGhpcyBlbnZpcm9ubWVudCwgd2hlbiB5b3UgZGVwbG95IGEgUHJvY2VzcyBTZXJ2ZXIgcG9kLCBpdCBidWlsZHMgYW4gaW1hZ2UgdGhhdCBsb2FkcyBhbmQgc3RhcnRzCiAgICAgIGEgcHJvY2VzcyBvciBncm91cCBvZiBwcm9jZXNzZXMuIFlvdSBjYW5ub3Qgc3RvcCBhbnkgcHJvY2VzcyBvbiB0aGUgcG9kIG9yIGFkZCBhbnkgbmV3IHByb2Nlc3MgdG8gdGhlIHBvZC4KICAgICAgSWYgeW91IHdhbnQgdG8gdXNlIGFub3RoZXIgdmVyc2lvbiBvZiBhIHByb2Nlc3Mgb3IgbW9kaWZ5IHRoZSBjb25maWd1cmF0aW9uIGluIGFueSBvdGhlciB3YXksIHlvdSBkZXBsb3kgYSBuZXcKICAgICAgc2VydmVyIGltYWdlIGFuZCBkaXNwbGFjZSB0aGUgb2xkIG9uZS4KICAgIGZyZWU6IHRydWUKICAgIG1ldGFkYXRhOgogICAgICBkaXNwbGF5TmFtZTogSW1tdXRhYmxlIFNlcnZlciAtIFByb2Nlc3MgU2VydmVyCiAgICBwYXJhbWV0ZXJzOgogICAgICAjIENvbW1vbiBDcmVkZW50aWFscwogICAgICAtICpfYXBiX2tpZV9hZG1pbl91c2VyCiAgICAgIC0gKl9hcGJfa2llX2FkbWluX3B3ZAogICAgICAtICpfYXBiX2ltYWdlX3N0cmVhbV90YWcKICAgICAgIyBIQQogICAgICAtIDw8OiAqX2FwYl9yZXBsaWNhcwogICAgICAgIG5hbWU6IGFwYl9raWVzZXJ2ZXJfcmVwbGljYXMKICAgICAgICBkZXNjcmlwdGlvbjogTnVtYmVyIG9mIFJlcGxpY2FzIG9mIHRoZSBQcm9jZXNzIFNlcnZlciB0aGF0IHdpbGwgYmUgaW5pdGlhbGx5IGRlcGxveWVkCiAgICAgICAgZGVmYXVsdDogMgoKICAgICAgIyBBcnRpZmFjdCBTb3VyY2UKICAgICAgLSBuYW1lOiBhcGJfa2llc2VydmVyX2NvbnRhaW5lcl9kZXBsb3ltZW50CiAgICAgICAgdGl0bGU6IFByb2Nlc3MgU2VydmVyIENvbnRhaW5lciBEZXBsb3ltZW50CiAgICAgICAgZGVzY3JpcHRpb246ICdQcm9jZXNzIFNlcnZlciBDb250YWluZXIgZGVwbG95bWVudCBjb25maWd1cmF0aW9uIGluIGZvcm1hdDogY29udGFpbmVySWQ9Z3JvdXBJZDphcnRpZmFjdElkOnZlcnNpb258YzI9ZzI6YTI6djInCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBkaXNwbGF5X2dyb3VwOiBBcnRpZmFjdCBzb3VyY2UKICAgICAgLSBuYW1lOiBhcGJfa2llc2VydmVyX3NvdXJjZV91cmwKICAgICAgICB0aXRsZTogR2l0IFJlcG9zaXRvcnkgVVJMCiAgICAgICAgZGVzY3JpcHRpb246IEdpdCBzb3VyY2UgVVJJIGZvciBhcHBsaWNhdGlvbi4gRm9yIGV4YW1wbGUsIGh0dHBzOi8vZ2l0aHViLmNvbS9qYm9zcy1jb250YWluZXItaW1hZ2VzL3JocGFtLTctb3BlbnNoaWZ0LWltYWdlLmdpdAogICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCiAgICAgIC0gbmFtZTogYXBiX2tpZXNlcnZlcl9zb3VyY2VfcmVmCiAgICAgICAgdGl0bGU6IEdpdCBSZXBvc2l0b3J5IFJlZmVyZW5jZQogICAgICAgIGRlc2NyaXB0aW9uOiBHaXQgYnJhbmNoL3RhZyByZWZlcmVuY2UuIEZvciBleGFtcGxlLCByaHBhbTcyIG9yIG1hc3RlcgogICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCiAgICAgIC0gbmFtZTogYXBiX2tpZXNlcnZlcl9zb3VyY2VfY29udGV4dAogICAgICAgIHRpdGxlOiBHaXQgUmVwb3NpdG9yeSBDb250ZXh0IERpcgogICAgICAgIGRlc2NyaXB0aW9uOiBQYXRoIHdpdGhpbiBHaXQgcHJvamVjdCB0byBidWlsZDsgZW1wdHkgZm9yIHJvb3QgcHJvamVjdCBkaXJlY3RvcnkuIEZvciBleGFtcGxlLCBxdWlja3N0YXJ0cy9saWJyYXJ5LXByb2Nlc3MvbGlicmFyeQogICAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEFydGlmYWN0IHNvdXJjZQogICAgICAtIG5hbWU6IGFwYl9raWVzZXJ2ZXJfZ2l0aHViX3dlYmhvb2tfc2VjcmV0CiAgICAgICAgdGl0bGU6IEdpdGh1YiBXZWJob29rIFNlY3JldAogICAgICAgIGRlc2NyaXB0aW9uOiBTZWNyZXQga2V5IHRvIHVzZSB3aGVuIGNvbmZpZ3VyaW5nIGEgR2l0SHViIFdlYmhvb2suIEdlbmVyYXRlZCBpZiBlbXB0eS4KICAgICAgICByZXF1aXJlZDogZmFsc2UKICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBkaXNwbGF5X2dyb3VwOiBBcnRpZmFjdCBzb3VyY2UKICAgICAgLSBuYW1lOiBhcGJfa2llc2VydmVyX2dlbmVyaWNfd2ViaG9va19zZWNyZXQKICAgICAgICB0aXRsZTogR2VuZXJpYyBXZWJob29rIFNlY3JldAogICAgICAgIGRlc2NyaXB0aW9uOiBTZWNyZXQga2V5IHRvIHVzZSB3aGVuIGNvbmZpZ3VyaW5nIGEgR2VuZXJpYyBXZWJob29rLiBHZW5lcmF0ZWQgaWYgZW1wdHkuCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlCiAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCiAgICAgIC0gbmFtZTogYXBiX2tpZXNlcnZlcl9hcnRpZmFjdF9kaXIKICAgICAgICB0aXRsZTogQXJ0aWZhY3QgZGlyZWN0b3JpZXMKICAgICAgICBkZXNjcmlwdGlvbjogTGlzdCBvZiBkaXJlY3RvcmllcyBmcm9tIHdoaWNoIGFyY2hpdmVzIHdpbGwgYmUgY29waWVkIGludG8gdGhlIGRlcGxveW1lbnQgZm9sZGVyLiBJZiB1bnNwZWNpZmllZCwgYWxsIGFyY2hpdmVzIGluIC90YXJnZXQgd2lsbCBiZSBjb3BpZWQuCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlCiAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCiAgICAgIC0gbmFtZTogYXBiX2tpZXNlcnZlcl9tYXZlbl9taXJyb3IKICAgICAgICB0aXRsZTogTWF2ZW4gbWlycm9yIFVSTAogICAgICAgIGRlc2NyaXB0aW9uOiBNYXZlbiBtaXJyb3IgdG8gdXNlIGZvciBTMkkgYnVpbGRzCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlCiAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgZGlzcGxheV9ncm91cDogQXJ0aWZhY3Qgc291cmNlCgogICAgICAjIEV4dGVybmFsIE1hdmVuIFJlcG9zaXRvcnkKICAgICAgLSAqX2FwYl9tYXZlbl9yZXBvX3VybAogICAgICAtICpfYXBiX21hdmVuX3JlcG9fdXNlcgogICAgICAtICpfYXBiX21hdmVuX3JlcG9fcHdkCgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9kYl90eXBlCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2RiX3NpemUKICAgICAgIyBLZXlzdG9yZSBhbmQgU2VjcmV0CiAgICAgIC0gPDw6ICpfYXBiX3NlY3JldF9uYW1lCiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9zZWNyZXRfbmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX25hbWUKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX2tleXN0b3JlX25hbWUKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9hbGlhcwogICAgICAgIG5hbWU6IGFwYl9raWVzZXJ2ZXJfa2V5c3RvcmVfYWxpYXMKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9wd2QKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX2tleXN0b3JlX3B3ZAogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX3VzZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfcHdkCiAgICAgIC0gPDw6ICpfYXBiX2tpZXNlcnZlcl9ob3N0bmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2ltYWdlX3N0cmVhbV9uYW1lCgogICAgICAjIEV4dGVybmFsIERhdGFiYXNlCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2RyaXZlcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kaWFsZWN0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX2hvc3QKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfcG9ydAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9uYW1lCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX3VybAoKICAgICAgIyBSb3V0ZXIKICAgICAgLSAqX2FwYl9yb3V0ZXJfc3ZjCiAgICAgIC0gKl9hcGJfcm91dGVyX2hvc3QKICAgICAgLSAqX2FwYl9yb3V0ZXJfcG9ydAogICAgICAtICpfYXBiX3JvdXRlcl9wcm90b2NvbAoKICAgICAgIyBDb250cm9sbGVyCiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl9zdmMKICAgICAgLSAqX2FwYl9jb250cm9sbGVyX2hvc3QKICAgICAgLSAqX2FwYl9jb250cm9sbGVyX3BvcnQKICAgICAgLSAqX2FwYl9jb250cm9sbGVyX3Byb3RvY29sCiAgICAgIC0gKl9hcGJfY29udHJvbGxlcl90b2tlbgogICAgICAtIDw8OiAqX2FwYl9jb250cm9sbGVyX3VzZXIKICAgICAgICBkaXNwbGF5X2dyb3VwOiBDb250cm9sbGVyIEludGVncmF0aW9uCiAgICAgIC0gPDw6ICpfYXBiX2NvbnRyb2xsZXJfcHdkCiAgICAgICAgZGlzcGxheV9ncm91cDogQ29udHJvbGxlciBJbnRlZ3JhdGlvbgoKICAgICAgIyBSSCAtIFNTTwogICAgICAtICpfYXBiX3Nzb191cmwKICAgICAgLSAqX2FwYl9zc29fcmVhbG0KICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudAogICAgICAgIG5hbWU6IGFwYl9raWVzZXJ2ZXJfc3NvX2NsaWVudAogICAgICAgIHRpdGxlOiBSSC1TU08gUHJvY2VzcyBTZXJ2ZXIgLSBDbGllbnQKICAgICAgICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBDbGllbnQgbmFtZSBmb3IgUHJvY2VzcyBTZXJ2ZXIuIElmIHRoZSBzZWNyZXQsIHVzZXIgYW5kIHBhc3N3b3JkIGFyZSBwcm92aWRlZCBpdCB3aWxsIGJlIGNyZWF0ZWQuIEZvciBleGFtcGxlLCBraWVzZXJ2ZXIKICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudF9zZWNyZXQKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX3Nzb19jbGllbnRfc2VjcmV0CiAgICAgICAgdGl0bGU6IFJILVNTTyBQcm9jZXNzIFNlcnZlciAtIENsaWVudCBTZWNyZXQKICAgICAgICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBDbGllbnQgc2VjcmV0IGZvciBQcm9jZXNzIFNlcnZlci4KICAgICAgLSAqX2FwYl9zc29fdXNlcgogICAgICAtICpfYXBiX3Nzb19wd2QKICAgICAgLSAqX2FwYl9zc29fZGlzYWJsZV9zc2xfY2VydF92YWxpZGF0aW9uCiAgICAgIC0gKl9hcGJfc3NvX3ByaW5jaXBhbF9hdHRyaWJ1dGUKCiAgICAgICMgTERBUAogICAgICAtICpfYXBiX2F1dGhfbGRhcF91cmwKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmluZF9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iaW5kX2NyZWRlbnRpYWwKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfamFhc19zZWN1cml0eV9kb21haW4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmFzZV9jdHhfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmFzZV9maWx0ZXIKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfc2VhcmNoX3Njb3BlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3NlYXJjaF90aW1lX2xpbWl0CiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Rpc3Rpbmd1aXNoZWRfbmFtZV9hdHRyaWJ1dGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcGFyc2VfdXNlcm5hbWUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfdXNlcm5hbWVfYmVnaW5fc3RyaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3VzZXJuYW1lX2VuZF9zdHJpbmcKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9hdHRyaWJ1dGVfaWQKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZXNfY3R4X2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfZmlsdGVyCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfcmVjdXJzaW9uCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2RlZmF1bHRfcm9sZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX25hbWVfYXR0cmlidXRlX2lkCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3BhcnNlX3JvbGVfbmFtZV9mcm9tX2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lzX2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JlZmVycmFsX3VzZXJfYXR0cmlidXRlX2lkX3RvX2NoZWNrCgogICAgICAjIFJvbGVNYXBwaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yb2xlc19wcm9wZXJ0aWVzCiAgICAgIC0gKl9hcGJfYXV0aF9yb2xlX21hcHBlcl9yZXBsYWNlX3JvbGUKCiAgLSBuYW1lOiBpbW11dGFibGUtbW9uCiAgICBkZXNjcmlwdGlvbjoKICAgICAgVXNlIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZyB0byBtb25pdG9yIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIHN0b3AgYW5kCiAgICAgIHJlc3RhcnQgc29tZSBvZiB0aGUgcHJvY2VzcyBpbnN0YW5jZXMgaW4gYW4gaW1tdXRhYmxlIGVudmlyb25tZW50LCBidXQgbm90IHRvIGRlcGxveSBhZGRpdGlvbmFsIHByb2Nlc3NlcyB0byBhbnkgUHJvY2VzcyBTZXJ2ZXIgb3IgdW5kZXBsb3kgYW55IGV4aXN0aW5nIG9uZXMgKHlvdSBjYW4gbm90IGFkZCBvciByZW1vdmUgY29udGFpbmVycykKICAgIGZyZWU6IHRydWUKICAgIG1ldGFkYXRhOgogICAgICBkaXNwbGF5TmFtZTogSW1tdXRhYmxlIFNlcnZlciAtIE1vbml0b3IKICAgIHBhcmFtZXRlcnM6CiAgICAgICMgQ29tbW9uIENyZWRlbnRpYWxzCiAgICAgIC0gKl9hcGJfa2llX2FkbWluX3VzZXIKICAgICAgLSAqX2FwYl9raWVfYWRtaW5fcHdkCiAgICAgIC0gKl9hcGJfaW1hZ2Vfc3RyZWFtX3RhZwoKICAgICAgIyBFeHRlcm5hbCBNYXZlbiBSZXBvc2l0b3J5CiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb191cmwKICAgICAgLSAqX2FwYl9tYXZlbl9yZXBvX3VzZXIKICAgICAgLSAqX2FwYl9tYXZlbl9yZXBvX3B3ZAoKICAgICAgIyBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKICAgICAgLSA8PDogKl9hcGJfcmVwbGljYXMKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX3JlcGxpY2FzCiAgICAgICAgZGVzY3JpcHRpb246IE51bWJlciBvZiBSZXBsaWNhcyBvZiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcgdGhhdCB3aWxsIGJlIGluaXRpYWxseSBkZXBsb3llZAogICAgICAgIGRlZmF1bHQ6IDEKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKICAgICAgLSA8PDogKl9hcGJfdm9sdW1lX3NpemUKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX3ZvbHVtZV9zaXplCiAgICAgICAgZGVzY3JpcHRpb246IFNwZWNpZnkgdGhlIFBlcnNpc3RlbnQgVm9sdW1lIENsYWltIHNpemUgdG8gY3JlYXRlIGZvciBzdG9yaW5nIHRoZSB1c2VyIGRhdGEuIEZvciBleGFtcGxlLCA2NE1pCiAgICAgICAgZGVmYXVsdDogNjRNaQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAjIEtleXN0b3JlIGFuZCBTZWNyZXQKICAgICAgLSA8PDogKl9hcGJfc2VjcmV0X25hbWUKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX3NlY3JldF9uYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX25hbWUKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX2tleXN0b3JlX25hbWUKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKICAgICAgLSA8PDogKl9hcGJfa2V5c3RvcmVfYWxpYXMKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX2tleXN0b3JlX2FsaWFzCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX3B3ZAogICAgICAgIG5hbWU6IGFwYl9idXNpbmVzc2NlbnRyYWxfa2V5c3RvcmVfcHdkCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX2J1c2luZXNzY2VudHJhbF9ob3N0bmFtZQogICAgICAgIGRlc2NyaXB0aW9uOiBQdWJsaWMgaG9zdG5hbWUgZm9yIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZy4gR2VuZXJhdGVkIGlmIGVtcHR5CiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgICMgT3RoZXIgdXNlcnMKICAgICAgLSA8PDogKl9hcGJfY29udHJvbGxlcl91c2VyCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX2NvbnRyb2xsZXJfcHdkCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCgogICAgICAjIFNtYXJ0IFJvdXRlcgogICAgICAtIDw8OiAqX2FwYl9yZXBsaWNhcwogICAgICAgIG5hbWU6IGFwYl9zbWFydHJvdXRlcl9yZXBsaWNhcwogICAgICAgIGRlc2NyaXB0aW9uOiBOdW1iZXIgb2YgUmVwbGljYXMgb2YgU21hcnQgUm91dGVyIHRoYXQgd2lsbCBiZSBpbml0aWFsbHkgZGVwbG95ZWQKICAgICAgICBkZWZhdWx0OiAyCiAgICAgICAgZGlzcGxheV9ncm91cDogU21hcnQgUm91dGVyCiAgICAgIC0gPDw6ICpfYXBiX3ZvbHVtZV9zaXplCiAgICAgICAgbmFtZTogYXBiX3NtYXJ0cm91dGVyX3ZvbHVtZV9zaXplCiAgICAgICAgZGVzY3JpcHRpb246IFNwZWNpZnkgdGhlIFBlcnNpc3RlbnQgVm9sdW1lIENsYWltIHNpemUgdG8gY3JlYXRlLiBGb3IgZXhhbXBsZSwgNjRNaQogICAgICAgIGRlZmF1bHQ6IDY0TWkKICAgICAgICBkaXNwbGF5X2dyb3VwOiBTbWFydCBSb3V0ZXIKICAgICAgLSA8PDogKl9hcGJfaG9zdG5hbWUKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfaG9zdG5hbWUKICAgICAgICBkZXNjcmlwdGlvbjogUHVibGljIGhvc3RuYW1lIGZvciBTbWFydCBSb3V0ZXIuIEdlbmVyYXRlZCBpZiBlbXB0eQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0IFJvdXRlcgoKICAgICAgIyBSSCAtIFNTTwogICAgICAtICpfYXBiX3Nzb191cmwKICAgICAgLSAqX2FwYl9zc29fcmVhbG0KICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudAogICAgICAgIG5hbWU6IGFwYl9zc29fYnVzaW5lc3NjZW50cmFsX2NsaWVudAogICAgICAgIHRpdGxlOiBSSC1TU08gQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nIC0gQ2xpZW50CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IG5hbWUgZm9yIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZy4gSWYgdGhlIHNlY3JldCwgdXNlciBhbmQgcGFzc3dvcmQgYXJlIHByb3ZpZGVkIGl0IHdpbGwgYmUgY3JlYXRlZC4gRm9yIGV4YW1wbGUsIGJ1c2luZXNzY2VudHJhbAogICAgICAtIDw8OiAqX2FwYl9zc29fY2xpZW50X3NlY3JldAogICAgICAgIG5hbWU6IGFwYl9zc29fYnVzaW5lc3NjZW50cmFsX2NsaWVudF9zZWNyZXQKICAgICAgICB0aXRsZTogUkgtU1NPIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZyAtIENsaWVudCBTZWNyZXQKICAgICAgICBkZXNjcmlwdGlvbjogUmVkIEhhdCBTaW5nbGUgU2lnbi1PbiBDbGllbnQgc2VjcmV0IGZvciBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcuCiAgICAgIC0gKl9hcGJfc3NvX3VzZXIKICAgICAgLSAqX2FwYl9zc29fcHdkCiAgICAgIC0gKl9hcGJfc3NvX2Rpc2FibGVfc3NsX2NlcnRfdmFsaWRhdGlvbgogICAgICAtICpfYXBiX3Nzb19wcmluY2lwYWxfYXR0cmlidXRlCgogICAgICAjIExEQVAKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfdXJsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2JpbmRfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfYmluZF9jcmVkZW50aWFsCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2phYXNfc2VjdXJpdHlfZG9tYWluCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfY3R4X2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2Jhc2VfZmlsdGVyCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3NlYXJjaF9zY29wZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfdGltZV9saW1pdAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kaXN0aW5ndWlzaGVkX25hbWVfYXR0cmlidXRlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3BhcnNlX3VzZXJuYW1lCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3VzZXJuYW1lX2JlZ2luX3N0cmluZwogICAgICAtICpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9lbmRfc3RyaW5nCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfYXR0cmlidXRlX2lkCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVzX2N0eF9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2ZpbHRlcgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX3JlY3Vyc2lvbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9kZWZhdWx0X3JvbGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9uYW1lX2F0dHJpYnV0ZV9pZAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9wYXJzZV9yb2xlX25hbWVfZnJvbV9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pc19kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yZWZlcnJhbF91c2VyX2F0dHJpYnV0ZV9pZF90b19jaGVjawoKICAgICAgIyBSb2xlTWFwcGluZwogICAgICAtICpfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcm9sZXNfcHJvcGVydGllcwogICAgICAtICpfYXBiX2F1dGhfcm9sZV9tYXBwZXJfcmVwbGFjZV9yb2xlCgogIC0gbmFtZTogbWFuYWdlZAogICAgZGVzY3JpcHRpb246CiAgICAgIEFuIGVudmlyb25tZW50IGZvciBydW5uaW5nIGV4aXN0aW5nIHByb2Nlc3NlcyBmb3Igc3RhZ2luZyBhbmQgcHJvZHVjdGlvbiBwdXJwb3Nlcy4KICAgICAgVGhpcyBlbnZpcm9ubWVudCBpbmNsdWRlcyBzZXZlcmFsIGdyb3VwcyBvZiBQcm9jZXNzIFNlcnZlciBwb2RzOyB5b3UgY2FuIGRlcGxveSBhbmQgdW5kZXBsb3kKICAgICAgcHJvY2Vzc2VzIG9uIGV2ZXJ5IHN1Y2ggZ3JvdXAgYW5kIGFsc28gc2NhbGUgdGhlIGdyb3VwIHVwIG9yIGRvd24gYXMgbmVjZXNzYXJ5LiBVc2UgQnVzaW5lc3MKICAgICAgQ2VudHJhbCBNb25pdG9yaW5nIHRvIGRlcGxveSwgcnVuLCBhbmQgc3RvcCB0aGUgcHJvY2Vzc2VzIGFuZCB0byBtb25pdG9yIHRoZWlyIGV4ZWN1dGlvbi4KCiAgICBmcmVlOiB0cnVlCiAgICBtZXRhZGF0YToKICAgICAgZGlzcGxheU5hbWU6IE1hbmFnZWQgRW52aXJvbm1lbnQKICAgIHBhcmFtZXRlcnM6CiAgICAgICMgQ29tbW9uIENyZWRlbnRpYWxzCiAgICAgIC0gKl9hcGJfa2llX2FkbWluX3VzZXIKICAgICAgLSAqX2FwYl9raWVfYWRtaW5fcHdkCiAgICAgIC0gKl9hcGJfaW1hZ2Vfc3RyZWFtX3RhZwoKICAgICAgIyBFeHRlcm5hbCBNYXZlbiBSZXBvc2l0b3J5CiAgICAgIC0gPDw6ICpfYXBiX21hdmVuX3JlcG9fdXJsCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICBkZXNjcmlwdGlvbjogRXh0ZXJuYWwgTWF2ZW4gUmVwb3NpdG9yeSBVUkwuCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb191c2VyCiAgICAgIC0gKl9hcGJfbWF2ZW5fcmVwb19wd2QKCiAgICAgICMgQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX3JlcGxpY2FzCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9yZXBsaWNhcwogICAgICAgIGRlZmF1bHQ6IDEKICAgICAgICBkaXNwbGF5X2dyb3VwOiBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcKICAgICAgLSA8PDogKl9hcGJfdm9sdW1lX3NpemUKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX3ZvbHVtZV9zaXplCiAgICAgICAgZGVzY3JpcHRpb246IFNwZWNpZnkgdGhlIFBlcnNpc3RlbnQgVm9sdW1lIENsYWltIHNpemUgdG8gY3JlYXRlIGZvciBzdG9yaW5nIHRoZSB1c2VyIGRhdGEuIEZvciBleGFtcGxlLCA2NE1pCiAgICAgICAgZGVmYXVsdDogNjRNaQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAjIyBLZXlzdG9yZSBhbmQgU2VjcmV0CiAgICAgIC0gPDw6ICpfYXBiX3NlY3JldF9uYW1lCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9zZWNyZXRfbmFtZQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9uYW1lCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9uYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nCiAgICAgIC0gPDw6ICpfYXBiX2tleXN0b3JlX2FsaWFzCiAgICAgICAgbmFtZTogYXBiX2J1c2luZXNzY2VudHJhbF9rZXlzdG9yZV9hbGlhcwogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9wd2QKICAgICAgICBuYW1lOiBhcGJfYnVzaW5lc3NjZW50cmFsX2tleXN0b3JlX3B3ZAogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAtIDw8OiAqX2FwYl9idXNpbmVzc2NlbnRyYWxfaG9zdG5hbWUKICAgICAgICBkZXNjcmlwdGlvbjogUHVibGljIGhvc3RuYW1lIGZvciBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcuIEdlbmVyYXRlZCBpZiBlbXB0eQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAjIE90aGVyIHVzZXJzCiAgICAgIC0gPDw6ICpfYXBiX2NvbnRyb2xsZXJfdXNlcgogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwogICAgICAtIDw8OiAqX2FwYl9jb250cm9sbGVyX3B3ZAogICAgICAgIGRpc3BsYXlfZ3JvdXA6IEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZwoKICAgICAgIyBTbWFydCBSb3V0ZXIKICAgICAgLSA8PDogKl9hcGJfcmVwbGljYXMKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfcmVwbGljYXMKICAgICAgICBkZWZhdWx0OiAyCiAgICAgICAgZGlzcGxheV9ncm91cDogU21hcnQgUm91dGVyCiAgICAgIC0gPDw6ICpfYXBiX3ZvbHVtZV9zaXplCiAgICAgICAgbmFtZTogYXBiX3NtYXJ0cm91dGVyX3ZvbHVtZV9zaXplCiAgICAgICAgZGVzY3JpcHRpb246IFNwZWNpZnkgdGhlIFBlcnNpc3RlbnQgVm9sdW1lIENsYWltIHNpemUgdG8gY3JlYXRlLiBGb3IgZXhhbXBsZSwgNjRNaQogICAgICAgIGRlZmF1bHQ6IDY0TWkKICAgICAgICBkaXNwbGF5X2dyb3VwOiBTbWFydCBSb3V0ZXIKICAgICAgLSA8PDogKl9hcGJfaG9zdG5hbWUKICAgICAgICBuYW1lOiBhcGJfc21hcnRyb3V0ZXJfaG9zdG5hbWUKICAgICAgICBkZXNjcmlwdGlvbjogUHVibGljIGhvc3RuYW1lIGZvciBTbWFydCBSb3V0ZXIuIEdlbmVyYXRlZCBpZiBlbXB0eQogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFNtYXJ0IFJvdXRlcgoKICAgICAgIyBQcm9jZXNzIFNlcnZlcgogICAgICAtIG5hbWU6IGFwYl9raWVzZXJ2ZXJfc2V0cwogICAgICAgIHRpdGxlOiBTZXRzIG9mIFByb2Nlc3MgU2VydmVycwogICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgTnVtYmVyIG9mIHNldHMgb2YgS2llIFByb2Nlc3MgU2VydmVyIGNsdXN0ZXIgKyBkYXRhYmFzZSB0aGF0IHdpbGwgYmUgZGVwbG95ZWQuCiAgICAgICAgICBFYWNoIHNldCBjYW4gcnVuIHNlcGFyYXRlIHNlcnZpY2VzIGFuZCBvdGhlciBhc3NldHMuIEFsbCBzZXRzIGNvbm5lY3QgdG8gdGhlIHNhbWUgU21hcnQgUm91dGVyCiAgICAgICAgZGVmYXVsdDogMgogICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgdHlwZTogbnVtYmVyCiAgICAgICAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKICAgICAgLSA8PDogKl9hcGJfcmVwbGljYXMKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX3JlcGxpY2FzCiAgICAgICAgZGVmYXVsdDogMwogICAgICAgIGRpc3BsYXlfZ3JvdXA6IFByb2Nlc3MgU2VydmVyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2RiX3R5cGUKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZGJfc2l6ZQoKICAgICAgIyMgS2V5c3RvcmUgYW5kIFNlY3JldAogICAgICAtIDw8OiAqX2FwYl9zZWNyZXRfbmFtZQogICAgICAgIG5hbWU6IGFwYl9raWVzZXJ2ZXJfc2VjcmV0X25hbWUKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtIDw8OiAqX2FwYl9rZXlzdG9yZV9uYW1lCiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9uYW1lCiAgICAgICAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKICAgICAgLSA8PDogKl9hcGJfa2V5c3RvcmVfYWxpYXMKICAgICAgICBuYW1lOiBhcGJfa2llc2VydmVyX2tleXN0b3JlX2FsaWFzCiAgICAgICAgZGlzcGxheV9ncm91cDogUHJvY2VzcyBTZXJ2ZXIKICAgICAgLSA8PDogKl9hcGJfa2V5c3RvcmVfcHdkCiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9rZXlzdG9yZV9wd2QKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl91c2VyCiAgICAgIC0gKl9hcGJfa2llc2VydmVyX3B3ZAogICAgICAtIDw8OiAqX2FwYl9raWVzZXJ2ZXJfaG9zdG5hbWUKICAgICAgICBkaXNwbGF5X2dyb3VwOiBQcm9jZXNzIFNlcnZlcgogICAgICAtICpfYXBiX2tpZXNlcnZlcl9pbWFnZV9zdHJlYW1fbmFtZQoKICAgICAgIyBFeHRlcm5hbCBEYXRhYmFzZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9kcml2ZXIKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfZGlhbGVjdAogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl9ob3N0CiAgICAgIC0gKl9hcGJfa2llc2VydmVyX2V4dGVybmFsX2RiX3BvcnQKICAgICAgLSAqX2FwYl9raWVzZXJ2ZXJfZXh0ZXJuYWxfZGJfbmFtZQogICAgICAtICpfYXBiX2tpZXNlcnZlcl9leHRlcm5hbF9kYl91cmwKCiAgICAgICMgUkggLSBTU08KICAgICAgLSAqX2FwYl9zc29fdXJsCiAgICAgIC0gKl9hcGJfc3NvX3JlYWxtCiAgICAgIC0gPDw6ICpfYXBiX3Nzb19jbGllbnQKICAgICAgICBuYW1lOiBhcGJfc3NvX2J1c2luZXNzY2VudHJhbF9jbGllbnQKICAgICAgICB0aXRsZTogUkgtU1NPIEJ1c2luZXNzIENlbnRyYWwgTW9uaXRvcmluZyAtIENsaWVudAogICAgICAgIGRlc2NyaXB0aW9uOiBSZWQgSGF0IFNpbmdsZSBTaWduLU9uIENsaWVudCBuYW1lIGZvciBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcuIElmIHRoZSBzZWNyZXQsIHVzZXIgYW5kIHBhc3N3b3JkIGFyZSBwcm92aWRlZCBpdCB3aWxsIGJlIGNyZWF0ZWQuIEZvciBleGFtcGxlLCBidXNpbmVzc2NlbnRyYWwKICAgICAgLSA8PDogKl9hcGJfc3NvX2NsaWVudF9zZWNyZXQKICAgICAgICBuYW1lOiBhcGJfc3NvX2J1c2luZXNzY2VudHJhbF9jbGllbnRfc2VjcmV0CiAgICAgICAgdGl0bGU6IFJILVNTTyBCdXNpbmVzcyBDZW50cmFsIE1vbml0b3JpbmcgLSBDbGllbnQgU2VjcmV0CiAgICAgICAgZGVzY3JpcHRpb246IFJlZCBIYXQgU2luZ2xlIFNpZ24tT24gQ2xpZW50IHNlY3JldCBmb3IgQnVzaW5lc3MgQ2VudHJhbCBNb25pdG9yaW5nLgogICAgICAtIDw8OiAqX2FwYl9zc29fY2xpZW50CiAgICAgICAgbmFtZTogYXBiX2tpZXNlcnZlcl9zc29fY2xpZW50CiAgICAgICAgdGl0bGU6IFJILVNTTyBQcm9jZXNzIFNlcnZlciAtIENsaWVudAogICAgICAgIGRlc2NyaXB0aW9uOiBSZWQgSGF0IFNpbmdsZSBTaWduLU9uIENsaWVudCBuYW1lIGZvciBQcm9jZXNzIFNlcnZlci4gSWYgdGhlIHNlY3JldCwgdXNlciBhbmQgcGFzc3dvcmQgYXJlIHByb3ZpZGVkIGl0IHdpbGwgYmUgY3JlYXRlZC4gRm9yIGV4YW1wbGUsIGtpZXNlcnZlcgogICAgICAtIDw8OiAqX2FwYl9zc29fY2xpZW50X3NlY3JldAogICAgICAgIG5hbWU6IGFwYl9raWVzZXJ2ZXJfc3NvX2NsaWVudF9zZWNyZXQKICAgICAgICB0aXRsZTogUkgtU1NPIFByb2Nlc3MgU2VydmVyIC0gQ2xpZW50IFNlY3JldAogICAgICAgIGRlc2NyaXB0aW9uOiBSZWQgSGF0IFNpbmdsZSBTaWduLU9uIENsaWVudCBzZWNyZXQgZm9yIFByb2Nlc3MgU2VydmVyLgogICAgICAtICpfYXBiX3Nzb191c2VyCiAgICAgIC0gKl9hcGJfc3NvX3B3ZAogICAgICAtICpfYXBiX3Nzb19kaXNhYmxlX3NzbF9jZXJ0X3ZhbGlkYXRpb24KICAgICAgLSAqX2FwYl9zc29fcHJpbmNpcGFsX2F0dHJpYnV0ZQoKICAgICAgIyBMREFQCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3VybAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iaW5kX2RuCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX2JpbmRfY3JlZGVudGlhbAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9qYWFzX3NlY3VyaXR5X2RvbWFpbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iYXNlX2N0eF9kbgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9iYXNlX2ZpbHRlcgogICAgICAtICpfYXBiX2F1dGhfbGRhcF9zZWFyY2hfc2NvcGUKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfc2VhcmNoX3RpbWVfbGltaXQKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfZGlzdGluZ3Vpc2hlZF9uYW1lX2F0dHJpYnV0ZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF9wYXJzZV91c2VybmFtZQogICAgICAtICpfYXBiX2F1dGhfbGRhcF91c2VybmFtZV9iZWdpbl9zdHJpbmcKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfdXNlcm5hbWVfZW5kX3N0cmluZwogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlX2F0dHJpYnV0ZV9pZAogICAgICAtICpfYXBiX2F1dGhfbGRhcF9yb2xlc19jdHhfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9maWx0ZXIKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9yZWN1cnNpb24KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfZGVmYXVsdF9yb2xlCiAgICAgIC0gKl9hcGJfYXV0aF9sZGFwX3JvbGVfbmFtZV9hdHRyaWJ1dGVfaWQKICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcGFyc2Vfcm9sZV9uYW1lX2Zyb21fZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcm9sZV9hdHRyaWJ1dGVfaXNfZG4KICAgICAgLSAqX2FwYl9hdXRoX2xkYXBfcmVmZXJyYWxfdXNlcl9hdHRyaWJ1dGVfaWRfdG9fY2hlY2sKCiAgICAgICMgUm9sZU1hcHBpbmcKICAgICAgLSAqX2FwYl9hdXRoX3JvbGVfbWFwcGVyX3JvbGVzX3Byb3BlcnRpZXMKICAgICAgLSAqX2FwYl9hdXRoX3JvbGVfbWFwcGVyX3JlcGxhY2Vfcm9sZQo="
modules:
  repositories:
    - path: modules
  install:
    - name: rhpam-apb
packages:
  repositories:
    - name: base
      id: rhel-7-server-rpms
  install:
    - java-1.8.0-openjdk-headless
osbs:
  repository:
    name: apbs/rhpam-7-apb-openshift
    branch: rhpam-7-rhel-7
