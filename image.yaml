schema_version: 1

name: "rhpam-7/rhpam71-apb"
description: "Red Hat Business Central 7.1 OpenShift Ansible Playbook Bundle"
version: "1.0"
from: "ansibleplaybookbundle/apb-base:latest"
labels:
  - name: "com.redhat.component"
    value: "rhpam-7-rhpam71-apb"
  - name: "io.k8s.description"
    value: "Platform for running Red Hat Process Automation Manager"
  - name: "io.k8s.display-name"
    value: "Red Hat Process Automation Manager 7.1"
  - name: "io.openshift.tags"
    value: "javaee,eap,eap7,rhpam,rhpam7,apb"
  - name: "com.redhat.apb.spec"
    value: ""
modules:
  repositories:
    - path: modules
  install:
    - name: rhpam-apb
packages:
  repositories:
    - name: base
      id: rhel-7-server-rpms
  install:
    - java-1.8.0-openjdk
